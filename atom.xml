<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[燎原之火的博客 | Lyzh's blog]]></title>
  <subtitle><![CDATA[燎原之火]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.linjiajun.com/"/>
  <updated>2016-03-26T05:51:37.641Z</updated>
  <id>http://blog.linjiajun.com/</id>
  
  <author>
    <name><![CDATA[Lyzh]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[浅析正则表达式模式匹配的String方法]]></title>
    <link href="http://blog.linjiajun.com/2016/03/22/%E6%B5%85%E6%9E%90%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%9A%84String%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.linjiajun.com/2016/03/22/浅析正则表达式模式匹配的String方法/</id>
    <published>2016-03-21T16:48:00.000Z</published>
    <updated>2016-03-26T05:51:37.641Z</updated>
    <content type="html"><![CDATA[<p>在JavaScript代码中使用正则表达式进行模式匹配经常会用到String对象和RegExp对象的一些方法，例如replace、match、search等方法，以下是对一些方法使用的总结。<br><a id="more"></a></p>
<p>String对象中支持正则表达式有4种方法，分别是：search、replace、match、split</p>
<h2 id="str-search_28regexp_29"><a href="#str-search_28regexp_29" class="headerlink" title="str.search(regexp)"></a>str.search(regexp)</h2><blockquote>
<p>定义：search()方法将在字符串str中检索与表达式regexp相匹配的字串，并且返回第一个匹配字串的第一个字符的位置。如果没有找到任何匹配的字串，则返回-1。</p>
</blockquote>
<p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Javascript"</span>;</span><br><span class="line">str.search(<span class="regexp">/script/</span>); <span class="comment">// 返回 script 中s的位置为 4</span></span><br><span class="line">str.search(<span class="regexp">/j/i</span>); <span class="comment">// 设置正则表达是标识i：忽略大小写，则匹配到J，返回位置0</span></span><br></pre></td></tr></table></figure></p>
<p>但是，search()方法不支持全局搜索，因为会忽略正则表达式参数的标识g，并且也忽略了regexp的lastIndex属性，总是从字符串的开始位置进行检索，所以它会总是返回str的第一个匹配的位置。<br>例如：<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">str</span> = <span class="string">"javascript is cool"</span>;</span><br><span class="line"><span class="built_in">str</span>.<span class="built_in">search</span>(/s/g); <span class="comment">// 返回 javascript 中的s位置4，不会继续检索s</span></span><br></pre></td></tr></table></figure></p>
<h3 id="str-replace_28regexp_2C_replacement_29"><a href="#str-replace_28regexp_2C_replacement_29" class="headerlink" title="str.replace(regexp, replacement)"></a>str.replace(regexp, replacement)</h3><blockquote>
<p>定义：replace()方法是执行查找并替换的操作。它将正则表达式regexp匹配到的字串，然后用replacement的字符串替换掉字串，如果有全局标识g，则替换全部匹配的字串，否则只替换第一个匹配字串。</p>
</blockquote>
<p>replace方法应该是比较常用的一个方法，在字符串替换操作中非常有用的。例如：</p>
<h4 id="1_u3001_u7B80_u5355_u66FF_u6362"><a href="#1_u3001_u7B80_u5355_u66FF_u6362" class="headerlink" title="1、简单替换"></a>1、简单替换</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> var <span class="keyword">str</span> = <span class="string">"javascript"</span>;</span><br><span class="line"><span class="keyword">str</span>.replace(/javascript/,<span class="string">'JavaScript'</span>); <span class="comment">// 将字符串javascript替换为JavaScript</span></span><br></pre></td></tr></table></figure>
<h4 id="2_u3001_u5168_u5C40_u66FF_u6362"><a href="#2_u3001_u5168_u5C40_u66FF_u6362" class="headerlink" title="2、全局替换"></a>2、全局替换</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用全局表示g进行全局替换</span></span><br><span class="line">var <span class="keyword">str</span> = <span class="string">"javascript"</span>;</span><br><span class="line"><span class="keyword">str</span>.replace(/a/g, <span class="string">'b'</span>); <span class="comment">// 将所有的字母a替换为字母b，返回 jbvbscript</span></span><br></pre></td></tr></table></figure>
<h4 id="3_u3001_u4F7F_u7528replacement_u4E2D_u7684_u7279_u6B8A_u5B57_u7B26_u66FF_u6362_uFF0C_u5728replacement_u4E2D_24_u5B57_u7B26_u6709_u7279_u6B8A_u7684_u610F_u4E49_uFF0C_u5177_u4F53_u8BF4_u660E_u5982_u4E0B_u8868_u683C_uFF1A"><a href="#3_u3001_u4F7F_u7528replacement_u4E2D_u7684_u7279_u6B8A_u5B57_u7B26_u66FF_u6362_uFF0C_u5728replacement_u4E2D_24_u5B57_u7B26_u6709_u7279_u6B8A_u7684_u610F_u4E49_uFF0C_u5177_u4F53_u8BF4_u660E_u5982_u4E0B_u8868_u683C_uFF1A" class="headerlink" title="3、使用replacement中的特殊字符替换，在replacement中$字符有特殊的意义，具体说明如下表格："></a>3、使用replacement中的特殊字符替换，在replacement中$字符有特殊的意义，具体说明如下表格：</h4><table>
<thead>
<tr>
<th>字符</th>
<th>替换文本</th>
</tr>
</thead>
<tbody>
<tr>
<td>$1、$2、…、$99</td>
<td>与regexp中的第1个到99 个子表达式相匹配的文本 </td>
</tr>
<tr>
<td>$&amp;</td>
<td>与regexp相匹配的字串 </td>
</tr>
<tr>
<td>$`</td>
<td>位于匹配子串左侧的文本 </td>
</tr>
<tr>
<td>$’</td>
<td>位于匹配子串右侧的文本 </td>
</tr>
<tr>
<td>$$</td>
<td>直接量符号 </td>
</tr>
</tbody>
</table>
<p>来看下例子：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> //<span class="number">1</span>、用子表达式替换：<span class="variable">$1</span>、<span class="variable">$2</span>等</span><br><span class="line"> var str = <span class="string">"javascript"</span>;</span><br><span class="line"> str.replace(/(java)(script)/,<span class="string">'$2$1'</span>); </span><br><span class="line">// 表达式中()就是一个子表达式，<span class="variable">$1</span>对应是第一个表达式的内容，即java，<span class="variable">$2</span>为script，所以替换结果为：scriptjava </span><br><span class="line"></span><br><span class="line"> //<span class="number">2</span>、$&amp; 为正值表达式匹配的字串</span><br><span class="line"> var str = <span class="string">"javascript"</span>;</span><br><span class="line"> str.replace(/java/,<span class="string">'$&amp;-'</span>); </span><br><span class="line"> // 正则表达式通过直接量java来匹配，匹配结果为java，则 $&amp;的值为java，然后用字符串$&amp;-来替换匹配的字串，结果为java-script</span><br><span class="line"></span><br><span class="line"> // <span class="number">3</span>、 $`  $<span class="string">'  $$</span><br><span class="line"> var str = "javascript";</span><br><span class="line"> str.replace(/ava/,"$`"); // $`为匹配子串ava的左侧文本，则为j，则替换后ava的结果为：jjscript</span><br><span class="line"> str.replace(/ava/,"$'</span><span class="string">"); // $'为匹配子串ava的右侧文本，则为script，则替换ava的结果为：jscriptscript</span><br><span class="line"> str.replace(/ava/,"</span>$$<span class="string">"); // $$为直接量符号，即插入一个$符号，替换结果为：j$script</span></span><br></pre></td></tr></table></figure></p>
<h4 id="4_u3001_u4F7F_u7528replacement_u4F5C_u4E3A_u51FD_u6570_u66FF_u6362"><a href="#4_u3001_u4F7F_u7528replacement_u4F5C_u4E3A_u51FD_u6570_u66FF_u6362" class="headerlink" title="4、使用replacement作为函数替换"></a>4、使用replacement作为函数替换</h4><p>replace的参数replacement可以是函数而不是字符串，每个匹配都会调用该函数，它返回的字符串将作为替换的文本使用。该函数的第一个参数是整个匹配模式的字符串，接下来的参数是与模式中的子表达式匹配的字符串，可以有0个或多个参数。接下来的参数是一个整数，声明了匹配在str中出现的位置。最后的参数是str自身。<br>来看个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// match 为匹配整个字符串，即：'abc12345#$*%'</span></span><br><span class="line"><span class="comment">// p1 为第一个子表达式，([^\d]*)，匹配0个或多个非数字的字符，即:abc</span></span><br><span class="line"><span class="comment">// p2 为第二个子表达式,(\d*)，匹配0个或多个的数字，即：12345</span></span><br><span class="line"><span class="comment">// p3 为第三个子表达式，([^\w]*)，匹配0个或匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'，即 #$*%</span></span><br><span class="line"><span class="comment">// offset 为模式匹配出现的位置，从第一个字符已经匹配成功，则位置为0</span></span><br><span class="line"><span class="comment">// string为字符串本身，即 abc12345#$*%</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replacer</span>(<span class="params">match, p1, p2, p3, offset, string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [p1, p2, p3].join(<span class="string">' - '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newString = <span class="string">'abc12345#$*%'</span>.replace(<span class="regexp">/([^\d]*)(\d*)([^\w]*)/</span>, replacer); </span><br><span class="line"><span class="comment">// 替换结果为：abc - 12345 - #$*%</span></span><br></pre></td></tr></table></figure>
<h2 id="str-match_28regexp_29"><a href="#str-match_28regexp_29" class="headerlink" title="str.match(regexp)"></a>str.match(regexp)</h2><blockquote>
<p>定义：match()方法是最常用的String正则表达式方法。它唯一的参数就是一个正则表达式或者通过RegExp()构造函数来创建正则表达式，返回值是包含了匹配结果的数组。</p>
</blockquote>
<p>match()方法中的regexp正则表达式一般又分为两种情况：有设置全局标志g和没有设置全局标志g</p>
<h4 id="1_u3001_u6709_u8BBE_u7F6E_u5168_u5C40_u6807_u5FD7"><a href="#1_u3001_u6709_u8BBE_u7F6E_u5168_u5C40_u6807_u5FD7" class="headerlink" title="1、有设置全局标志"></a>1、有设置全局标志</h4><p>如果设置了全局标志g，则返回的数组包含的就是出现在字符串的所有匹配结果，例如：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局匹配</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"1 plus 2 equals 3"</span>;</span><br><span class="line">str.<span class="literal">match</span>(/\<span class="keyword">d</span>/<span class="keyword">g</span>);  <span class="comment">// 匹配字符串中出现的所有数字，并返回一个数组： [1,2,3]</span></span><br></pre></td></tr></table></figure></p>
<h4 id="2_u3001_u6CA1_u6709_u8BBE_u7F6E_u5168_u5C40_u6807_u5FD7"><a href="#2_u3001_u6CA1_u6709_u8BBE_u7F6E_u5168_u5C40_u6807_u5FD7" class="headerlink" title="2、没有设置全局标志"></a>2、没有设置全局标志</h4><p>如果没有设置全局标志，则就不是全局性的检索，只是检索第一个匹配。这种情况下，match()方法匹配的结果也是返回一个数组，数组的第一个元素就是匹配的字符串，而余下的元素则是正则表达式中用括号括起来的子表达式。来看个例子：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非全局匹配</span></span><br><span class="line"> var <span class="built_in">str</span> = <span class="string">"visit my blog at http://www.example.com"</span>;</span><br><span class="line"> <span class="built_in">str</span>.<span class="built_in">match</span>(/(\w+):\/\/([\w.]+)/); <span class="comment">// 返回结果：["http://www.example.com", "http", "www.example.com"]</span></span><br><span class="line"> <span class="comment">// 正则表达式匹配的结果为：http://www.example.com</span></span><br><span class="line"> <span class="comment">// 第一个子表达式 (\w+)匹配结果：http</span></span><br><span class="line"> <span class="comment">// 第二个子表达式 ([\w.])匹配结果： www.example.com</span></span><br></pre></td></tr></table></figure>
<h2 id="str-split_28delimiter_2C_limit_29"><a href="#str-split_28delimiter_2C_limit_29" class="headerlink" title="str.split(delimiter, limit)"></a>str.split(delimiter, limit)</h2><blockquote>
<p>定义：split()方法可以把调用它的字符串分解为一个字串数组，使用的分隔符是它的参数。<br>参数：<br>      delimiter：字符串或者正则表达式，从该参数指定的地方分割字符串。<br>      limit：指定返回数组的最大长度，如果没有设置该参数，则整个字符串都会被分割。<br>例如：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、 只传一个参数，默认分割整个字符串</span></span><br><span class="line"><span class="keyword">var</span> str =<span class="string">"a,b,c,d,e"</span>;</span><br><span class="line">str.split(<span class="string">','</span>); <span class="comment">// 返回分割的字符串数组：["a", "b", "c", "d", "e"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、传入两个参数</span></span><br><span class="line"><span class="keyword">var</span> str =<span class="string">"a,b,c,d,e"</span>;</span><br><span class="line">str.split(<span class="string">','</span>,<span class="number">3</span>); <span class="comment">//指定限定长度，则返回对应的数组：["a", "b", "c"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、使用正则表达式匹配，不包含分割字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"aa44bb55cc66dd"</span>;</span><br><span class="line">str.split(<span class="regexp">/\d+/</span>); <span class="comment">//通过匹配数字进行分割字符串，但不包含分割的字符串，则返回的结果为：["aa","bb","cc","dd"];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、使用正则表达式匹配，包含分割字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"aa44bb55cc66dd"</span>;</span><br><span class="line">str.split(<span class="regexp">/(\d+)/</span>); <span class="comment">//通过匹配数字进行分割字符串，且分割的字符串是包含在子表达式中，则返回的结果为：["aa", "44", "bb", "55", "cc", "66", "dd"]</span></span><br></pre></td></tr></table></figure>
<p>以上。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在JavaScript代码中使用正则表达式进行模式匹配经常会用到String对象和RegExp对象的一些方法，例如replace、match、search等方法，以下是对一些方法使用的总结。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016年Web前端面试题目汇总]]></title>
    <link href="http://blog.linjiajun.com/2016/03/15/2016%E5%B9%B4Web%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E6%B1%87%E6%80%BB/"/>
    <id>http://blog.linjiajun.com/2016/03/15/2016年Web前端面试题目汇总/</id>
    <published>2016-03-14T16:20:00.000Z</published>
    <updated>2016-03-26T05:33:55.047Z</updated>
    <content type="html"><![CDATA[<p>以下是收集一些面试中经常会遇到的经典面试题以及自己面试过程中无法解决的问题，通过对知识的整理以及经验的总结，重新巩固自身的前端基础知识，如有错误或更好的答案，欢迎指正。:）<br><a id="more"></a></p>
<p><div id="catalogBox"></div>    </p>
<h2 id="HTML/CSS_u90E8_u5206"><a href="#HTML/CSS_u90E8_u5206" class="headerlink" title="HTML/CSS部分"></a>HTML/CSS部分</h2><h3 id="1_u3001_u4EC0_u4E48_u662F_u76D2_u5B50_u6A21_u578B_uFF1F"><a href="#1_u3001_u4EC0_u4E48_u662F_u76D2_u5B50_u6A21_u578B_uFF1F" class="headerlink" title="1、什么是盒子模型？"></a>1、什么是盒子模型？</h3><p>在网页中，一个元素占有空间的大小由几个部分构成，其中包括元素的内容（content），元素的内边距（padding），元素的边框（border），元素的外边距（margin）四个部分。这四个部分占有的空间中，有的部分可以显示相应的内容，而有的部分只用来分隔相邻的区域或区域。4个部分一起构成了css中元素的盒模型。</p>
<h3 id="2_u3001_u884C_u5185_u5143_u7D20_u6709_u54EA_u4E9B_uFF1F_u5757_u7EA7_u5143_u7D20_u6709_u54EA_u4E9B_uFF1F__u7A7A_28void_29_u5143_u7D20_u6709_u90A3_u4E9B_uFF1F"><a href="#2_u3001_u884C_u5185_u5143_u7D20_u6709_u54EA_u4E9B_uFF1F_u5757_u7EA7_u5143_u7D20_u6709_u54EA_u4E9B_uFF1F__u7A7A_28void_29_u5143_u7D20_u6709_u90A3_u4E9B_uFF1F" class="headerlink" title="2、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？"></a>2、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h3><p>行内元素：a、b、span、img、input、strong、select、label、em、button、textarea<br>块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote<br>空元素：即系没有内容的HTML元素，例如：br、meta、hr、link、input、img</p>
<h3 id="3_u3001CSS_u5B9E_u73B0_u5782_u76F4_u6C34_u5E73_u5C45_u4E2D"><a href="#3_u3001CSS_u5B9E_u73B0_u5782_u76F4_u6C34_u5E73_u5C45_u4E2D" class="headerlink" title="3、CSS实现垂直水平居中"></a>3、CSS实现垂直水平居中</h3><p>一道经典的问题，实现方法有很多种，以下是其中一种实现：<br>HTML结构：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>CSS：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.wrapper&#123;position:relative;&#125;</span><br><span class="line">.content&#123;</span><br><span class="line">    background-color:#6699FF;</span><br><span class="line">    width:200px;</span><br><span class="line">    height:200px;</span><br><span class="line">    position: absolute;        //父元素需要相对定位</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    margin-top:-100px ;   //二分之一的height，width</span><br><span class="line">    margin-left: -100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="4_u3001_u7B80_u8FF0_u4E00_u4E0Bsrc_u4E0Ehref_u7684_u533A_u522B"><a href="#4_u3001_u7B80_u8FF0_u4E00_u4E0Bsrc_u4E0Ehref_u7684_u533A_u522B" class="headerlink" title="4、简述一下src与href的区别"></a>4、简述一下src与href的区别</h3><p>href 是指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。</p>
<p>src是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。</p>
<h3 id="5_u3001_u4EC0_u4E48_u662FCSS_Hack_3F"><a href="#5_u3001_u4EC0_u4E48_u662FCSS_Hack_3F" class="headerlink" title="5、什么是CSS Hack?"></a>5、什么是CSS Hack?</h3><p>一般来说是针对不同的浏览器写不同的CSS,就是 CSS Hack。<br>IE浏览器Hack一般又分为三种，条件Hack、属性级Hack、选择符Hack（详细参考CSS文档：<a href="http://www.phpstudy.net/css3/" target="_blank" rel="external">css文档</a>）。例如：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 1、条件Hack</span></span><br><span class="line">  &lt;!--[<span class="keyword">if</span> IE]&gt;</span><br><span class="line">     &lt;style&gt;</span><br><span class="line">           .test&#123;<span class="built_in">color</span>:<span class="built_in">red</span>;&#125;</span><br><span class="line">     &lt;/style&gt;</span><br><span class="line">  &lt;![endif]--&gt;</span><br><span class="line">  <span class="comment">// 2、属性Hack</span></span><br><span class="line">   .test&#123;</span><br><span class="line"><span class="built_in">color</span>:#<span class="number">090</span>\<span class="number">9</span>; <span class="comment">/* For IE8+ */</span></span><br><span class="line">*<span class="built_in">color</span>:#f00;  <span class="comment">/* For IE7 and earlier */</span></span><br><span class="line">_color:#ff0;  <span class="comment">/* For IE6 and earlier */</span></span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">// 3、选择符Hack</span></span><br><span class="line">   * html .test&#123;<span class="built_in">color</span>:#<span class="number">090</span>;&#125;       <span class="comment">/* For IE6 and earlier */</span></span><br><span class="line">   * + html .test&#123;<span class="built_in">color</span>:#ff0;&#125;     <span class="comment">/* For IE7 */</span></span><br></pre></td></tr></table></figure></p>
<h3 id="6_u3001_u7B80_u8FF0_u540C_u6B65_u548C_u5F02_u6B65_u7684_u533A_u522B"><a href="#6_u3001_u7B80_u8FF0_u540C_u6B65_u548C_u5F02_u6B65_u7684_u533A_u522B" class="headerlink" title="6、简述同步和异步的区别"></a>6、简述同步和异步的区别</h3><p>同步是阻塞模式，异步是非阻塞模式。<br>同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；<br>异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。</p>
<h3 id="7_u3001px_u548Cem_u7684_u533A_u522B"><a href="#7_u3001px_u548Cem_u7684_u533A_u522B" class="headerlink" title="7、px和em的区别"></a>7、px和em的区别</h3><p>px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。em得值不是固定的，并且em会继承父级元素的字体大小。<br>浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em</p>
<h3 id="8_u3001_u4EC0_u4E48_u53EB_u4F18_u96C5_u964D_u7EA7_u548C_u6E10_u8FDB_u589E_u5F3A_uFF1F"><a href="#8_u3001_u4EC0_u4E48_u53EB_u4F18_u96C5_u964D_u7EA7_u548C_u6E10_u8FDB_u589E_u5F3A_uFF1F" class="headerlink" title="8、什么叫优雅降级和渐进增强？"></a>8、什么叫优雅降级和渐进增强？</h3><p>渐进增强 progressive enhancement：<br>针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p>
<p>优雅降级 graceful degradation：<br>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>
<p>区别：<br>a. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给<br>b. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要<br>c. 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带</p>
<h3 id="9_u3001_u6D4F_u89C8_u5668_u7684_u5185_u6838_u5206_u522B_u662F_u4EC0_u4E48_3F"><a href="#9_u3001_u6D4F_u89C8_u5668_u7684_u5185_u6838_u5206_u522B_u662F_u4EC0_u4E48_3F" class="headerlink" title="9、浏览器的内核分别是什么?"></a>9、浏览器的内核分别是什么?</h3><p> IE: trident内核<br> Firefox：gecko内核<br> Safari：webkit内核<br> Opera：以前是presto内核，Opera现已改用Google Chrome的Blink内核<br> Chrome：Blink(基于webkit，Google与Opera Software共同开发)</p>
<p>##JavaScript部分</p>
<h3 id="1_u3001_u600E_u6837_u6DFB_u52A0_u3001_u79FB_u9664_u3001_u79FB_u52A8_u3001_u590D_u5236_u3001_u521B_u5EFA_u548C_u67E5_u627E_u8282_u70B9_uFF1F"><a href="#1_u3001_u600E_u6837_u6DFB_u52A0_u3001_u79FB_u9664_u3001_u79FB_u52A8_u3001_u590D_u5236_u3001_u521B_u5EFA_u548C_u67E5_u627E_u8282_u70B9_uFF1F" class="headerlink" title="1、怎样添加、移除、移动、复制、创建和查找节点？"></a>1、怎样添加、移除、移动、复制、创建和查找节点？</h3><p>1）创建新节点<br>createDocumentFragment()    //创建一个DOM片段<br>createElement()   //创建一个具体的元素<br>createTextNode()   //创建一个文本节点</p>
<p>2）添加、移除、替换、插入<br>appendChild()      //添加<br>removeChild()      //移除<br>replaceChild()      //替换<br>insertBefore()      //插入</p>
<p>3）查找<br>getElementsByTagName()    //通过标签名称<br>getElementsByName()     //通过元素的Name属性的值<br>getElementById()        //通过元素Id，唯一性</p>
<h3 id="2_u3001_u5B9E_u73B0_u4E00_u4E2A_u51FD_u6570clone_uFF0C_u53EF_u4EE5_u5BF9JavaScript_u4E2D_u76845_u79CD_u4E3B_u8981_u7684_u6570_u636E_u7C7B_u578B_uFF08_u5305_u62ECNumber_u3001String_u3001Object_u3001Array_u3001Boolean_uFF09_u8FDB_u884C_u503C_u590D_u5236_u3002"><a href="#2_u3001_u5B9E_u73B0_u4E00_u4E2A_u51FD_u6570clone_uFF0C_u53EF_u4EE5_u5BF9JavaScript_u4E2D_u76845_u79CD_u4E3B_u8981_u7684_u6570_u636E_u7C7B_u578B_uFF08_u5305_u62ECNumber_u3001String_u3001Object_u3001Array_u3001Boolean_uFF09_u8FDB_u884C_u503C_u590D_u5236_u3002" class="headerlink" title="2、实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制。"></a>2、实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span><br><span class="line"> * 对象克隆</span><br><span class="line"> * 支持基本数据类型及对象</span><br><span class="line"> * 递归方法</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> o;</span><br><span class="line">	<span class="keyword">switch</span> (<span class="keyword">typeof</span> obj) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"undefined"</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"string"</span>:</span><br><span class="line">			o = obj + <span class="string">""</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"number"</span>:</span><br><span class="line">			o = obj - <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"boolean"</span>:</span><br><span class="line">			o = obj;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">"object"</span>: <span class="comment">// object 分为两种情况 对象（Object）或数组（Array）</span></span><br><span class="line">			<span class="keyword">if</span> (obj === <span class="literal">null</span>) &#123;</span><br><span class="line">				o = <span class="literal">null</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(obj).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">"Array"</span>) &#123;</span><br><span class="line">					o = [];</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class="line">						o.push(clone(obj[i]));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					o = &#123;&#125;;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">						o[k] = clone(obj[k]);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			o = obj;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3_u3001_u5982_u4F55_u6D88_u9664_u4E00_u4E2A_u6570_u7EC4_u91CC_u9762_u91CD_u590D_u7684_u5143_u7D20_uFF1F"><a href="#3_u3001_u5982_u4F55_u6D88_u9664_u4E00_u4E2A_u6570_u7EC4_u91CC_u9762_u91CD_u590D_u7684_u5143_u7D20_uFF1F" class="headerlink" title="3、如何消除一个数组里面重复的元素？"></a>3、如何消除一个数组里面重复的元素？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：</span></span><br><span class="line"><span class="keyword">var</span> arr1 =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">    arr2 = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len = arr1.length; i&lt; len; i++)&#123;</span><br><span class="line">	<span class="keyword">if</span>(arr2.indexOf(arr1[i]) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		arr2.push(arr1[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(arr2); <span class="comment">// 1,2,3,4,5,6</span></span><br></pre></td></tr></table></figure>
<h3 id="4_u3001_u60F3_u5B9E_u73B0_u4E00_u4E2A_u5BF9_u9875_u9762_u67D0_u4E2A_u8282_u70B9_u7684_u62D6_u66F3_uFF1F_u5982_u4F55_u505A_uFF1F_uFF08_u4F7F_u7528_u539F_u751FJS_uFF09_u3002"><a href="#4_u3001_u60F3_u5B9E_u73B0_u4E00_u4E2A_u5BF9_u9875_u9762_u67D0_u4E2A_u8282_u70B9_u7684_u62D6_u66F3_uFF1F_u5982_u4F55_u505A_uFF1F_uFF08_u4F7F_u7528_u539F_u751FJS_uFF09_u3002" class="headerlink" title="4、想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）。"></a>4、想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）。</h3><h3 id="5_u3001_u5728Javascript_u4E2D_u4EC0_u4E48_u662F_u4F2A_u6570_u7EC4_uFF1F_u5982_u4F55_u5C06_u4F2A_u6570_u7EC4_u8F6C_u5316_u4E3A_u6807_u51C6_u6570_u7EC4_uFF1F"><a href="#5_u3001_u5728Javascript_u4E2D_u4EC0_u4E48_u662F_u4F2A_u6570_u7EC4_uFF1F_u5982_u4F55_u5C06_u4F2A_u6570_u7EC4_u8F6C_u5316_u4E3A_u6807_u51C6_u6570_u7EC4_uFF1F" class="headerlink" title="5、在Javascript中什么是伪数组？如何将伪数组转化为标准数组？"></a>5、在Javascript中什么是伪数组？如何将伪数组转化为标准数组？</h3><p>伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以对真正数组遍历方法来遍历它们。典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组。可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);  </span><br><span class="line"><span class="comment">//为了使用unshift数组方法，将argument转化为真正的数组</span></span><br><span class="line">      args.unshift(<span class="string">'(app)'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, args);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="6_u3001Javascript_u4E2Dcallee_u548Ccaller_u7684_u4F5C_u7528_uFF1F"><a href="#6_u3001Javascript_u4E2Dcallee_u548Ccaller_u7684_u4F5C_u7528_uFF1F" class="headerlink" title="6、Javascript中callee和caller的作用？"></a>6、Javascript中callee和caller的作用？</h3><p>caller是返回一个对函数的引用，该函数调用了当前函数；</p>
<p>callee是返回正在被执行的function函数，也就是所指定的function对象的正文。</p>
<h3 id="7_u3001_u8BF7_u63CF_u8FF0_u4E00_u4E0Bcookies_uFF0CsessionStorage_u548ClocalStorage_u7684_u533A_u522B"><a href="#7_u3001_u8BF7_u63CF_u8FF0_u4E00_u4E0Bcookies_uFF0CsessionStorage_u548ClocalStorage_u7684_u533A_u522B" class="headerlink" title="7、请描述一下cookies，sessionStorage和localStorage的区别"></a>7、请描述一下cookies，sessionStorage和localStorage的区别</h3><p>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</p>
<p>web storage和cookie的区别</p>
<p>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。<br>除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。</p>
<h3 id="8_u3001_u624B_u5199_u6570_u7EC4_u5FEB_u901F_u6392_u5E8F"><a href="#8_u3001_u624B_u5199_u6570_u7EC4_u5FEB_u901F_u6392_u5E8F" class="headerlink" title="8、手写数组快速排序"></a>8、手写数组快速排序</h3><p>关于快排算法的详细说明，可以参考阮一峰老师的文章<a href="http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html" target="_blank" rel="external">快速排序</a><br>“快速排序”的思想很简单，整个排序过程只需要三步：<br>（1）在数据集之中，选择一个元素作为”基准”（pivot）。<br>（2）所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。<br>（3）对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p>
<h3 id="9_u3001_u7EDF_u8BA1_u5B57_u7B26_u4E32_u4E2D_u5B57_u6BCD_u4E2A_u6570_u6216_u7EDF_u8BA1_u6700_u591A_u5B57_u6BCD_u6570_u3002"><a href="#9_u3001_u7EDF_u8BA1_u5B57_u7B26_u4E32_u4E2D_u5B57_u6BCD_u4E2A_u6570_u6216_u7EDF_u8BA1_u6700_u591A_u5B57_u6BCD_u6570_u3002" class="headerlink" title="9、统计字符串中字母个数或统计最多字母数。"></a>9、统计字符串中字母个数或统计最多字母数。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aaaabbbccccddfgh"</span>;</span><br><span class="line"><span class="keyword">var</span> obj  = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</span><br><span class="line">	<span class="keyword">var</span> v = str.charAt(i);</span><br><span class="line">	<span class="keyword">if</span>(obj[v] &amp;&amp; obj[v].value == v)&#123;</span><br><span class="line">		obj[v].count = ++ obj[v].count;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		obj[v] = &#123;&#125;;</span><br><span class="line">		obj[v].count = <span class="number">1</span>;</span><br><span class="line">		obj[v].value = v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">	<span class="built_in">document</span>.write(obj[key].value +<span class="string">'='</span>+obj[key].count+<span class="string">'&amp;nbsp;'</span>); <span class="comment">// a=4  b=3  c=4  d=2  f=1  g=1  h=1 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10_u3001_u5199_u4E00_u4E2Afunction_uFF0C_u6E05_u9664_u5B57_u7B26_u4E32_u524D_u540E_u7684_u7A7A_u683C_u3002_uFF08_u517C_u5BB9_u6240_u6709_u6D4F_u89C8_u5668_uFF09"><a href="#10_u3001_u5199_u4E00_u4E2Afunction_uFF0C_u6E05_u9664_u5B57_u7B26_u4E32_u524D_u540E_u7684_u7A7A_u683C_u3002_uFF08_u517C_u5BB9_u6240_u6709_u6D4F_u89C8_u5668_uFF09" class="headerlink" title="10、写一个function，清除字符串前后的空格。（兼容所有浏览器）"></a>10、写一个function，清除字符串前后的空格。（兼容所有浏览器）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (str &amp;&amp; <span class="keyword">typeof</span> str === <span class="string">"string"</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> str.replace(<span class="regexp">/(^\s*)|(\s*)$/g</span>,<span class="string">""</span>); <span class="comment">//去除前后空白符</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##其他</p>
<h3 id="1_u3001_u4E00_u6B21_u5B8C_u6574_u7684HTTP_u4E8B_u52A1_u662F_u600E_u6837_u7684_u4E00_u4E2A_u8FC7_u7A0B_uFF1F"><a href="#1_u3001_u4E00_u6B21_u5B8C_u6574_u7684HTTP_u4E8B_u52A1_u662F_u600E_u6837_u7684_u4E00_u4E2A_u8FC7_u7A0B_uFF1F" class="headerlink" title="1、一次完整的HTTP事务是怎样的一个过程？"></a>1、一次完整的HTTP事务是怎样的一个过程？</h3><p>基本流程：<br>a. 域名解析<br>b. 发起TCP的3次握手<br>c. 建立TCP连接后发起http请求<br>d. 服务器端响应http请求，浏览器得到html代码<br>e. 浏览器解析html代码，并请求html代码中的资源<br>f. 浏览器对页面进行渲染呈现给用户</p>
<h3 id="2_u3001_u5BF9_u524D_u7AEF_u5DE5_u7A0B_u5E08_u8FD9_u4E2A_u804C_u4F4D_u4F60_u662F_u600E_u4E48_u6837_u7406_u89E3_u7684_uFF1F"><a href="#2_u3001_u5BF9_u524D_u7AEF_u5DE5_u7A0B_u5E08_u8FD9_u4E2A_u804C_u4F4D_u4F60_u662F_u600E_u4E48_u6837_u7406_u89E3_u7684_uFF1F" class="headerlink" title="2、对前端工程师这个职位你是怎么样理解的？"></a>2、对前端工程师这个职位你是怎么样理解的？</h3><p>a. 前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好<br>b. 参与项目，快速高质量完成实现效果图，精确到1px；<br>c. 与团队成员，UI设计，产品经理的沟通；<br>d. 做好的页面结构，页面重构和用户体验；<br>e. 处理hack，兼容、写出优美的代码格式；<br>f. 针对服务器的优化、拥抱最新前端技术。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>以下是收集一些面试中经常会遇到的经典面试题以及自己面试过程中无法解决的问题，通过对知识的整理以及经验的总结，重新巩固自身的前端基础知识，如有错误或更好的答案，欢迎指正。:）<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅析字符串操作方法slice、substr、substring及其IE兼容性]]></title>
    <link href="http://blog.linjiajun.com/2015/12/16/%E6%B5%85%E6%9E%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95slice%E3%80%81substr%E3%80%81substring%E5%8F%8A%E5%85%B6IE%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    <id>http://blog.linjiajun.com/2015/12/16/浅析字符串操作方法slice、substr、substring及其IE兼容性/</id>
    <published>2015-12-15T16:17:00.000Z</published>
    <updated>2016-03-26T05:34:20.230Z</updated>
    <content type="html"><![CDATA[<p>在截取字符串时常常会用到substr()、substring()、slice()方法，有时混淆之间的用法，故总结下。<br><a id="more"></a></p>
<div id="catalogBox">&nbsp;</div>

<h2 id="slice_28_29"><a href="#slice_28_29" class="headerlink" title="slice()"></a>slice()</h2><p>定义：接受一个或者两个参数，第一个参数指定子字符串的开始位置。第二个参数表示子字符串的结束位置（不包括结束位置的那个字符），如果没有传递第二个参数，则将字符串的长度作为结束位置。</p>
<p>1、传递参数为正值情况：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">var</span> str =”<span style="color: #000000;">helloWorld”;<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 一个参数，则将字符串长度作为结束位置</span><br>alert(str.slice(3)); <span style="color: #008000;">//</span><span style="color: #008000;"> “loWorld”</span><br><br><span style="color: #008000;">//</span><span style="color: #008000;"> 两个参数，7位置上的字符为”r”,但不包括结束位置的字符</span><br>alert(str.slice(3,7)); <span style="color: #008000;">//</span><span style="color: #008000;"> “loWo”</span></pre><br></div>

<p>2、传递参数为负值的情况：</p>
<p>slice()方法会将传入的负值与字符串长度相加。</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">var</span> str =”<span style="color: #000000;">helloWorld”;<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 一个参数，与字符串长度相加即为slice(7)</span><br>alert(str.slice(-3)); <span style="color: #008000;">//</span><span style="color: #008000;"> “rld”</span><br><br><span style="color: #008000;">//</span><span style="color: #008000;"> 两个参数，与字符串长度相加即为slice(3,6)</span><br>alert(str.slice(3,-4)); <span style="color: #008000;">//</span><span style="color: #008000;"> “loW”</span></pre><br></div>

<p>3、第二个参数比第一个参数值小的情况：</p>
<p>slice()方法传入的第二个参数比第一个参数小的话，则返回空字符串。</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">var</span> str =”helloWorld”<span style="color: #000000;">;<br>alert(str.slice(</span>5,3)); <span style="color: #008000;">//</span><span style="color: #008000;"> “”</span></pre><br></div>

<p>4、IE兼容性</p>
<p>在IE8浏览器测试下，没啥问题，行为与现代浏览器一致。</p>
<h2 id="substring_28_29"><a href="#substring_28_29" class="headerlink" title="substring()"></a>substring()</h2><p>定义：接受一个或者两个参数，第一个参数指定子字符串的开始位置。第二个参数表示子字符串的结束位置（不包括结束位置的那个字符），如果没有传递第二个参数，则将字符串的长度作为结束位置。</p>
<p>1、传递参数为正值情况：与slice()方法行为相同的</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">var</span> str =”helloWorld”<span style="color: #000000;">;<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 一个参数，则将字符串长度作为结束位置</span><br>alert(str.substring(3)); <span style="color: #008000;">//</span><span style="color: #008000;"> “loWorld”</span><br><br><span style="color: #008000;">//</span><span style="color: #008000;"> 两个参数，7位置上的字符为”r”,但不包括结束位置的字符</span><br>alert(str.substring(3,7)); <span style="color: #008000;">//</span><span style="color: #008000;"> “loWo”</span></pre><br></div>

<p>2、传递参数为负值的情况：</p>
<p>substring()方法会把所有负值参数转换为0。来看下例子：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">var</span> str =”helloWorld”<span style="color: #000000;">;<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 两个参数，-4会转换为0，相当于substring(3,0) –&gt;即为 substring(0,3)</span><br>alert(str.substring(3,-4)); <span style="color: #008000;">//</span><span style="color: #008000;"> “hel”</span></pre><br></div>

<p>substring()方法会将较小的数作为开始位置，将较大的数作为结束位置。如上面的例子substring(3,0) 与substring(0,3)是一样效果的。</p>
<p>4、IE兼容性</p>
<p>在IE8浏览器测试下，没啥问题，行为与现代浏览器一致。</p>
<h2 id="substr_28_29"><a href="#substr_28_29" class="headerlink" title="substr()"></a>substr()</h2><p>定义：接受一个或者两个参数，第一个参数指定子字符串的开始位置。第二个参数跟之前的方法有些区别，表示返回的字符个数。如果没有传递第二个参数，则将字符串的长度作为结束位置。来看例子：</p>
<p>1、传递参数为正值情况：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">var</span> str =”helloWorld”<span style="color: #000000;">;<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 一个参数，则将字符串长度作为结束位置</span><br>alert(str.substr(3)); <span style="color: #008000;">//</span><span style="color: #008000;"> “loWorld”</span><br><br><span style="color: #008000;">//</span><span style="color: #008000;"> 两个参数，从位置3开始截取后面7个字符</span><br>alert(str.substr(3,7)); <span style="color: #008000;">//</span><span style="color: #008000;"> “loWorld”</span></pre><br></div>

<p>2、传递参数为负值的情况：</p>
<p>substr()方法会将负的第一个参数加上字符串的长度，而将负的第二个参数转换为0。</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">var</span> str =”helloWorld”<span style="color: #000000;">;<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 将第一个负的参数加上字符串的长度—&gt;</span><span style="color: #008000;"><br>//</span><span style="color: #008000;">即为：substr(7,5) ，从位置7开始向后截取5个字符</span><br>alert(str.substr(-3,5)); <span style="color: #008000;">//</span><span style="color: #008000;"> “rld”</span><br><br><span style="color: #008000;">//</span><span style="color: #008000;"> 将第二个参数转换为0</span><span style="color: #008000;"><br>//</span><span style="color: #008000;"> 即为：substr(3,0)，即从位置3截取0个字符串，则返回空</span><br>alert(str.substr(3,-2)); <span style="color: #008000;">//</span><span style="color: #008000;"> “”</span></pre><br></div>

<p>3、IE兼容性</p>
<p>substr()方法传递负值的情况下会存在问题，会返回原始的字符串。IE9修复了此问题。</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>在传递正值参数情况下，slice() 和 substring () 行为是一致的，substr()方法在第二个参数上会容易混淆</p>
<p>在传递负值参数情况下，slice() 方法是通过字符串长度相加，符合一般思维，substring()第二个参数转换为0会容易出问题，起始位置会容易变更，</p>
<p>substr() 方法负值情况下会出现IE兼容性问题。</p>
<p>综上，一般推荐使用slice()方法。</p>
<hr>
<p>&nbsp;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在截取字符串时常常会用到substr()、substring()、slice()方法，有时混淆之间的用法，故总结下。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的2015年度书单]]></title>
    <link href="http://blog.linjiajun.com/2015/12/13/%E6%88%91%E7%9A%842015%E5%B9%B4%E5%BA%A6%E4%B9%A6%E5%8D%95/"/>
    <id>http://blog.linjiajun.com/2015/12/13/我的2015年度书单/</id>
    <published>2015-12-13T09:17:14.000Z</published>
    <updated>2016-01-13T14:26:28.478Z</updated>
    <content type="html"><![CDATA[<p>整理了这一年读过的书，电子书和实体书都买了不少，不过很多都没有读完，呵呵。<br>在读过的书中，挑出部分，作为2015年度书单。<br><a id="more"></a><br><strong><a href="http://book.douban.com/subject/10786473/" target="_blank" rel="external">《自控力》</a></strong></p>
<blockquote>
<p><img src="http://img3.douban.com/mpic/s10685385.jpg" alt="自控力"><br>这本书从心理学、神经学和日常的生活例子等各种方面讲述了什么是自控力，自控力的发生过程以及自控力的重要性。读这本书可以对自控力有更清晰的认知，对提高自控力有一定的帮助。推荐阅读。</p>
</blockquote>
<p><strong><a href="http://book.douban.com/subject/5366248/" target="_blank" rel="external">《极简欧洲史》</a></strong></p>
<blockquote>
<p><img src="http://img3.douban.com/mpic/s4542951.jpg" alt="极简欧洲史"><br>一本历史教科书，概览欧洲文明起源和发展，读起来引人入胜。</p>
</blockquote>
<p><strong><a href="http://book.douban.com/subject/1033778/" target="_blank" rel="external">《富爸爸，穷爸爸》</a></strong></p>
<blockquote>
<p><img src="http://img3.douban.com/mpic/s1429010.jpg" alt="富爸爸，穷爸爸"><br>《富爸爸，穷爸爸》是一个真实的故事，作者罗伯特・清崎的亲生父亲和朋友的父亲对金钱的看法截然不同，这使他对认识金钱产生了兴趣，最终他接受了朋友的父亲的建议，也就是书中所说的。“富爸爸”的观念，即不要做金钱的奴隶，要让金钱为我们工作，并由此成为一名极富传奇色彩的成功的投资家。这本书很大程度地影响了我的金钱观，所以说视野真的很重要，基于什么高度看问题，往往是由你的视野来决定的。看得越深，走得越远。读书是提高视野、思想的很好的一个途径。</p>
</blockquote>
<p><strong><a href="http://book.douban.com/subject/25862578/" target="_blank" rel="external">《解忧杂货店》</a></strong></p>
<blockquote>
<p><img src="http://img4.douban.com/mpic/s27284878.jpg" alt="解忧杂货店"><br>今年有点热门的一本书，粗略地读了一遍，小说的故事的架构和巧妙情节设计，加上一点科幻的色彩和时空的穿越，不得不佩服作者的才华。</p>
</blockquote>
<p><strong><a href="http://book.douban.com/subject/6021440/" target="_blank" rel="external">《黑客与画家》</a></strong></p>
<blockquote>
<p><img src="http://img3.douban.com/mpic/s4669554.jpg" alt="黑客与画家"><br>码农必读经典书籍。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>整理了这一年读过的书，电子书和实体书都买了不少，不过很多都没有读完，呵呵。<br>在读过的书中，挑出部分，作为2015年度书单。<br>]]>
    
    </summary>
    
      <category term="读书 计划 目标" scheme="http://blog.linjiajun.com/tags/%E8%AF%BB%E4%B9%A6-%E8%AE%A1%E5%88%92-%E7%9B%AE%E6%A0%87/"/>
    
      <category term="读书" scheme="http://blog.linjiajun.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo搭建日志]]></title>
    <link href="http://blog.linjiajun.com/2015/12/13/Hexo%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97/"/>
    <id>http://blog.linjiajun.com/2015/12/13/Hexo搭建日志/</id>
    <published>2015-12-13T09:17:14.000Z</published>
    <updated>2016-03-26T05:54:38.122Z</updated>
    <content type="html"><![CDATA[<h3 id="12_u67089_u65E5_u6DFB_u52A0RSS_u8BA2_u9605"><a href="#12_u67089_u65E5_u6DFB_u52A0RSS_u8BA2_u9605" class="headerlink" title="12月9日添加RSS订阅"></a>12月9日添加RSS订阅</h3><a id="more"></a>
<pre><code>通过npm安装：命令npm install hexo-generator-feed --save
在source文件夹新建atom.xml文件
在hexo的_config.yml设置rss的路径
</code></pre><h3 id="12_u670813_u65E5_u6DFB_u52A0disqus_u8BC4_u8BBA_u63D2_u4EF6_u53CA_u4E2D_u6587_u5316"><a href="#12_u670813_u65E5_u6DFB_u52A0disqus_u8BC4_u8BBA_u63D2_u4EF6_u53CA_u4E2D_u6587_u5316" class="headerlink" title="12月13日添加disqus评论插件及中文化"></a>12月13日添加disqus评论插件及中文化</h3><pre><code>在disqus注册生成short_name，添加到hexo博客配置文件中，
在主题的配置文件里设置disqus: true
进入admin设置，点击编辑模式，修改语言为Chinese
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="12_u67089_u65E5_u6DFB_u52A0RSS_u8BA2_u9605"><a href="#12_u67089_u65E5_u6DFB_u52A0RSS_u8BA2_u9605" class="headerlink" title="12月9日添加RSS订阅"></a>12月9日添加RSS订阅</h3>]]>
    
    </summary>
    
      <category term="Hexo 博客" scheme="http://blog.linjiajun.com/tags/Hexo-%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="前端开发" scheme="http://blog.linjiajun.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://blog.linjiajun.com/2015/12/13/hello-world/"/>
    <id>http://blog.linjiajun.com/2015/12/13/hello-world/</id>
    <published>2015-12-13T09:17:14.000Z</published>
    <updated>2016-03-26T01:41:57.997Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[谈谈JavaScript类型检测]]></title>
    <link href="http://blog.linjiajun.com/2015/11/22/%E8%B0%88%E8%B0%88JavaScript%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B/"/>
    <id>http://blog.linjiajun.com/2015/11/22/谈谈JavaScript类型检测/</id>
    <published>2015-11-22T09:03:00.000Z</published>
    <updated>2016-03-26T05:34:41.202Z</updated>
    <content type="html"><![CDATA[<div id="catalogBox">&nbsp;</div>

<p>javascript内置的类型检测机制并非完全可靠。比如typeof操作符，并不能准确的判断数据是哪个类型，比如：数组和对象就不能通过typeof来区分。<br><a id="more"></a></p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">typeof</span> [] ===”object” ; <span style="color: #008000;">//</span><span style="color: #008000;"> true</span><br><span style="color: #0000ff;">typeof</span> {} === “object”; <span style="color: #008000;">//</span><span style="color: #008000;"> true</span></pre><br></div>

<p>但是typeof用来区别对象与基本数据类型时就比较有用了。</p>
<h2 id="u57FA_u672C_u6570_u636E_u7C7B_u578B_u68C0_u6D4B"><a href="#u57FA_u672C_u6570_u636E_u7C7B_u578B_u68C0_u6D4B" class="headerlink" title="基本数据类型检测"></a>基本数据类型检测</h2><p>由于typeof对所有对象和数组类型返回的都是”object”，所以它在区别对象与基本数据类型时才有用。一个值使用typeof操作符可能返回下列某个字符串，注意是字符串：</p>
<p>“undefined”表示这个值未定义</p>
<p>“boolean”表示这个值是布尔值</p>
<p>“string”表示这个值是字符串</p>
<p>“number”表示这个值是数值</p>
<p>“object”表示这个值是对象或null（注意：typeof null 将返回”object”，不能准确地判断类型的合法性，因此不能用typeof来检测对象类型。）</p>
<p>“function”表示这个值是函数（注意：Safari第四版在对正则表达式使用typeof操作符时回返回”function”，因此很难确定这个值到底是不是函数。）</p>
<h2 id="u5F15_u7528_u7C7B_u578B_u68C0_u6D4B"><a href="#u5F15_u7528_u7C7B_u578B_u68C0_u6D4B" class="headerlink" title="引用类型检测"></a>引用类型检测</h2><p>JavaScript引用类型有：Object、Array、Date、Error、RegExp、Function、基本包装类型（Boolean类型、Number类型、String类型）、单体内置对象（Global对象、Math对象）等。检测引用类型可以使用 instanceof 和 Object.toString()方法。</p>
<p><strong>instanceof 运算符</strong></p>
<p>instanceof运算符要求其左边的运算数是一个对象，右边的运算数则是对象类的名字。如果该运算符的左边的对象是右边类的一个实例，则返回true，否则返回false。例如：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">var</span> d = <span style="color: #0000ff;">new</span><span style="color: #000000;"> Date();<br><br>d </span><span style="color: #0000ff;">instanceof</span> Date; <span style="color: #008000;">//</span><span style="color: #008000;"> true</span><br>d <span style="color: #0000ff;">instanceof</span> Object; <span style="color: #008000;">//</span><span style="color: #008000;"> true</span><br>d <span style="color: #0000ff;">instanceof</span> Number ; <span style="color: #008000;">//</span><span style="color: #008000;">false </span><br><br><span style="color: #0000ff;">var</span> a =<span style="color: #000000;"> [];<br>a </span><span style="color: #0000ff;">instanceof</span> Array ; <span style="color: #008000;">//</span><span style="color: #008000;"> true</span><br>a <span style="color: #0000ff;">instanceof</span> Object; <span style="color: #008000;">//</span><span style="color: #008000;"> true</span><br>a <span style="color: #0000ff;">instanceof</span> RegExp; <span style="color: #008000;">//</span><span style="color: #008000;"> false</span></pre><br></div>

<p>但是利用instanceof 操作符确定某个对象是不是数组会有些问题，例如：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">if</span>( value <span style="color: #0000ff;">instanceof</span><span style="color: #000000;"> Array ) {<br>  </span><span style="color: #008000;">//</span><span style="color: #008000;"> do something</span><br>}</pre><br></div>

<p>instanceof 操作符的问题在于，它假定只有一个全局执行环境。如果网页中包含多个框架，那其实就存在两个以上不同的全局执行环境，从而存在两个以上不同的Array构造函数。如果你从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组就会分别具有各自的不同的构造函数。因此在第二个框架对传入的数组执行 value instanceof Array 就会返回false了，因为构造函数是不一样的。</p>
<p><strong>Object.toString()检测对象类型</strong></p>
<p>在任何值上调用原生的toString()方法，都会返回一个[object nativeConstructorName] 格式的字符串。每个类在内部都会有一个[[Class]]属性，这个属性就指定上述字符串中的构造函数名。例如：</p>
<div class="cnblogs_code"><br><pre><span style="color: #008000;">//</span><span style="color: #008000;"> 检测数组类型</span><br><span style="color: #0000ff;">function</span><span style="color: #000000;"> isArray(value){<br>   </span><span style="color: #0000ff;">return</span> Object.prototype.toString.call(value) == “[object Array]”<span style="color: #000000;"><br>}<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 检测函数</span><br><span style="color: #0000ff;">function</span><span style="color: #000000;"> isFunction(value){<br>   </span><span style="color: #0000ff;">return</span> Object.prototype.toString.call(value) == “[object Function]”<span style="color: #000000;"><br>}<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 检测正则表达式</span><br><span style="color: #0000ff;">function</span><span style="color: #000000;"> isRegExp(value){<br>   </span><span style="color: #0000ff;">return</span> Object.prototype.toString.call(value) == “[object RegExp]”<span style="color: #000000;"><br>}</span></pre><br></div>

<p>&nbsp;注意：对于在IE中以COM对象形式实现的任何函数，isFunction() 都将返回false，因为它们并非原生的JavaScript函数。</p>
<p>jQuery检测对象类型也是用到了toString()方法，查看type()方法的实现可以看到：</p>
<div class="cnblogs_code"><br><pre>//version:jquery-1.11.3<br><br>var class2type = {};</pre><br><pre><span style="color: #008000;">//</span><span style="color: #008000;"> Populate the class2type map</span><br>jQuery.each(“Boolean Number String Function Array Date RegExp Object Error”.split(“ “), <span style="color: #0000ff;">function</span><span style="color: #000000;">(i, name) {<br>    class2type[ </span>“[object “ + name + “]” ] =<span style="color: #000000;"> name.toLowerCase();<br>});<br></span></pre><br></div><br><div class="cnblogs_code"><br><pre>type: <span style="color: #0000ff;">function</span><span style="color: #000000;">( obj ) {<br>        </span><span style="color: #0000ff;">if</span> ( obj == <span style="color: #0000ff;">null</span><span style="color: #000000;"> ) {<br>            </span><span style="color: #0000ff;">return</span> obj + “”<span style="color: #000000;">;<br>        }<br>        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">typeof</span> obj === “object” || <span style="color: #0000ff;">typeof</span> obj === “function” ?<span style="color: #000000;"><br>            class2type[ toString.call(obj) ] </span>|| “object”<span style="color: #000000;"> :<br>            </span><span style="color: #0000ff;">typeof</span><span style="color: #000000;"> obj;<br>    }</span></pre><br></div>

<p>&nbsp;通过定义一个class2type对象把所有类型的toString()返回值通过键值对存储起来。在调用type方法时通过toString()方法返回值进行匹配，最后返回检测值的类型。</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>在区别基本数据类型和对象类型时可以使用typeof运算符，对于对象的类型确定通常使用原生toString()检测，注意Object.prototype.toString() 本身也可能被修改。</p>
<p>以上是JavaScript类型检测的一些基础知识总结，干货不多，望各位大神指教，欢迎留言讨论。</p>
]]></content>
    <summary type="html">
    <![CDATA[<div id="catalogBox">&nbsp;</div>

<p>javascript内置的类型检测机制并非完全可靠。比如typeof操作符，并不能准确的判断数据是哪个类型，比如：数组和对象就不能通过typeof来区分。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Flexbox实现垂直水平居中]]></title>
    <link href="http://blog.linjiajun.com/2015/09/07/Flexbox%E5%AE%9E%E7%8E%B0%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
    <id>http://blog.linjiajun.com/2015/09/07/Flexbox实现垂直水平居中/</id>
    <published>2015-09-07T14:26:00.000Z</published>
    <updated>2016-03-26T05:37:25.360Z</updated>
    <content type="html"><![CDATA[<p>Flexbox(伸缩盒)是CSS3中新增的特性，利用这个属性可以解决页面中的居中问题。只需要3行代码就可以实现，不需要设置元素的尺寸，能够自适应页面。<br><a id="more"></a><br>这个方法只能在现代浏览器上有效，IE10+、chrome、Safari、Firefox。例如：</p>
<p>HTML：</p>
<p>首先，创建一个div容器，容器内是需要居中的内容</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=”container”</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #008000;">&lt;!–</span><span style="color: #008000;">容器内的元素将会居中</span><span style="color: #008000;">–&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">img </span><span style="color: #ff0000;">src</span><span style="color: #0000ff;">=”fireworks.jpg”</span><span style="color: #ff0000;"> alt</span><span style="color: #0000ff;">=”fireworks”</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>3行CSS代码：</p>
<div class="cnblogs_code"><br><pre><span style="color: #800000;">.container</span>{<span style="color: #ff0000;"><br>    display</span>:<span style="color: #0000ff;"> flex</span>;<span style="color: #ff0000;"><br>    justify-content</span>:<span style="color: #0000ff;"> center</span>;<span style="color: #ff0000;"><br>    align-items</span>:<span style="color: #0000ff;"> center</span>;<br>}</pre><br></div>

<p>note：</p>
<p>1.设置container的display的类型为flex，激活为flexbox模式。</p>
<p>2.justify-content定义水平方向的元素位置</p>
<p>3.align-items定义垂直方向的元素位置</p>
<p>搞定。。。</p>
<p>&nbsp;</p>
<p>更多阅读：</p>
<p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">flexbox完全指南</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes" target="_blank" rel="external">Using_CSS_flexible_boxes</a></p>
<p><a href="http://flexboxin5.com/" target="_blank" rel="external">Flexbox in 5 minutes</a></p>
<p><a href="http://tutorialzine.com/2015/09/quick-tip-the-simplest-way-to-center-elements-vertically-and-horizontally/" target="_blank" rel="external">The Simplest Way To Center Elements Vertically And Horizontally</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Flexbox(伸缩盒)是CSS3中新增的特性，利用这个属性可以解决页面中的居中问题。只需要3行代码就可以实现，不需要设置元素的尺寸，能够自适应页面。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery高级技巧——性能优化篇]]></title>
    <link href="http://blog.linjiajun.com/2015/08/23/jQuery%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AF%87/"/>
    <id>http://blog.linjiajun.com/2015/08/23/jQuery高级技巧——性能优化篇/</id>
    <published>2015-08-23T15:54:00.000Z</published>
    <updated>2016-03-26T05:37:39.460Z</updated>
    <content type="html"><![CDATA[<div id="catalogBox">&nbsp;</div>

<h2 id="u901A_u8FC7CDN_uFF08Content_Delivery_Network_uFF09_u5F15_u5165jQuery_u5E93"><a href="#u901A_u8FC7CDN_uFF08Content_Delivery_Network_uFF09_u5F15_u5165jQuery_u5E93" class="headerlink" title="通过CDN（Content Delivery Network）引入jQuery库"></a>通过CDN（Content Delivery Network）引入jQuery库</h2><p>&nbsp;要提升网站中javascript的性能的最简单的一步就是引入最新版本的jQuery库，新发布的版本通常在性能上会有更好的提升而且也修复了一下bug。或者通过CDN引入也是很好的选择,通过CDN引入能够减少网站的加载时间。以下是一些CDN服务：<br><a id="more"></a></p>
<div class="cnblogs_code"><br><pre><span style="color: #008000;">&lt;!–</span><span style="color: #008000;"> Case 1 - jQuery CDN </span><span style="color: #008000;">–&gt;</span><br><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">src</span><span style="color: #0000ff;">=”<a href="http://code.jquery.com/jquery-1.10.2.min.js" target="_blank" rel="external">http://code.jquery.com/jquery-1.10.2.min.js</a>“</span> <span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #008000;">&lt;!–</span><span style="color: #008000;"> Case 2 - requesting jQuery from Googles CDN (notice the protocol) </span><span style="color: #008000;">–&gt;</span><br><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">src</span><span style="color: #0000ff;">=”//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js”</span> <span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #008000;">&lt;!–</span><span style="color: #008000;"> Case 3 - requesting the latest minor 1.10.x version (only cached for an hour) </span><span style="color: #008000;">–&gt;</span><br><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">src</span><span style="color: #0000ff;">=”//ajax.googleapis.com/ajax/libs/jquery/1.10/jquery.min.js”</span> <span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #008000;">&lt;!–</span><span style="color: #008000;"> Case 4 - requesting the absolute latest jQuery version (use with caution) </span><span style="color: #008000;">–&gt;</span><br><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">src</span><span style="color: #0000ff;">=”<a href="http://code.jquery.com/jquery.min.js" target="_blank" rel="external">http://code.jquery.com/jquery.min.js</a>“</span> <span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;<br></span></pre><br></div>

<p>一些国内的CDN服务：</p>
<div class="cnblogs_code"><br><pre><span style="color: #000000;"><a href="http://www.bootcdn.cn/jquery/" target="_blank" rel="external">http://www.bootcdn.cn/jquery/</a><br><br></span><span style="color: #008000;">&lt;!–</span><span style="color: #008000;">新浪 CDN</span><span style="color: #008000;">–&gt;</span><br><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">src</span><span style="color: #0000ff;">=”<a href="http://lib.sinaapp.com/js/jquery/1.9.1/jquery-1.9.1.min.js" target="_blank" rel="external">http://lib.sinaapp.com/js/jquery/1.9.1/jquery-1.9.1.min.js</a>“</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span><br><br><span style="color: #008000;">&lt;!–</span><span style="color: #008000;">百度 CDN</span><span style="color: #008000;">–&gt;</span><br><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">src</span><span style="color: #0000ff;">=”<a href="http://libs.baidu.com/jquery/1.9.1/jquery.min.js" target="_blank" rel="external">http://libs.baidu.com/jquery/1.9.1/jquery.min.js</a>“</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span><br><br><span style="color: #008000;">&lt;!–</span><span style="color: #008000;">Bootstrap CDN</span><span style="color: #008000;">–&gt;</span><span style="color: #000000;"><br><a href="http://www.bootcdn.cn/jquery/" target="_blank" rel="external">http://www.bootcdn.cn/jquery/</a></span></pre><br></div>

<h2 id="u51CF_u5C11DOM_u64CD_u4F5C"><a href="#u51CF_u5C11DOM_u64CD_u4F5C" class="headerlink" title="减少DOM操作"></a>减少DOM操作</h2><p>虽然javascript性能上有了很大的提升，但是DOM操作还是很耗费资源的，需要减少对DOM操作。当在一个页面中插入大量的元素的时候，尤其重要。例如：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”elem”</span> <span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span></pre><br></div><br><div class="cnblogs_code"><br><pre><span style="color: #008000;">//</span><span style="color: #008000;"> 不好的方式</span><span style="color: #008000;"><br>//</span><span style="color: #008000;">var elem = $(‘#elem’);</span><span style="color: #008000;"><br>//</span><span style="color: #008000;">for(var i = 0; i &lt; 100; i++){</span><span style="color: #008000;"><br>//</span><span style="color: #008000;"> elem.append(‘&lt;li&gt;element ‘+i+’&lt;/li&gt;’);<br>//}<br><br><em>// 好的方式</em><br>var elem = $(‘#elem’ ),<br>arr = [];<br>for(var i = 0;  i &lt; 100;  i++){<br>arr. push(‘&lt;li&gt;element ‘ +i+’&lt;/li&gt;’ );<br>}<br>elem. append(arr. join(‘’ ));<br></span></pre><br></div>

<p>将所有的元素缓存起来一次插入性能上会有所提升，因为只触发页面一次重绘。对于CSS样式属性也是同样的道理。</p>
<p>更多阅读：&nbsp;<a href="http://www.cnblogs.com/dangjian/p/4443734.html" target="_blank" rel="external">前端页面卡顿？可能是DOM操作惹的祸，你需要优化代码</a></p>
<h2 id="u9002_u5F53_u4F7F_u7528_u539F_u751FJS"><a href="#u9002_u5F53_u4F7F_u7528_u539F_u751FJS" class="headerlink" title="适当使用原生JS"></a>适当使用原生JS</h2><p>创建jQuery对象会带来一些开销。所以，如果比较注重性能的话，尽可能使用原生的javascript。在某些方面可能会更容易理解和写更少的代码。例如：</p>
<div class="cnblogs_code"><br><pre><span style="color: #008000;">//</span><span style="color: #008000;"> 打印list中的li的id</span><br>$(‘#colors li’ ). each(<span style="color: #0000ff;">function</span><span style="color: #000000;">(){<br></span><span style="color: #008000;">//</span><span style="color: #008000;">将$(this).attr(‘id’)方法替换为直接通过ID属性访问</span><br>console. log(<span style="color: #0000ff;">this</span><span style="color: #000000;">. id);<br>})</span></pre><br></div>

<h2 id="u9009_u62E9_u5668_u4F18_u5316"><a href="#u9009_u62E9_u5668_u4F18_u5316" class="headerlink" title="选择器优化"></a>选择器优化</h2><p>如果你需要更好的性能，但是仍然要用到jQuery，你可以在jQuery选择器优化做一些尝试。以下是一个测试程序，通过浏览器的控制台console.time 和console.timeEnd 方法来记录不同选择器执行时间。</p>
<p>&nbsp;HTML:</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”peanutButter”</span> <span style="color: #0000ff;">&gt;</span><br><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”jelly”</span><span style="color: #ff0000;"> class</span><span style="color: #0000ff;">=”.jellyTime”</span> <span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>JS:</p>
<div class="cnblogs_code"><br><pre><span style="color: #008000;">//</span><span style="color: #008000;">测试程序</span><br><span style="color: #0000ff;">var</span> iterations = 10000<span style="color: #000000;">,<br>    i;<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;">——————————————–</span><span style="color: #008000;"><br>//</span><span style="color: #008000;">Case 1: 很慢</span><br>console.time(‘Fancy’<span style="color: #000000;">);<br></span><span style="color: #0000ff;">for</span> (i = 0; i &lt; iterations; i++<span style="color: #000000;">) {<br>    </span><br>    $(‘#peanutButter div:first’<span style="color: #000000;">);<br>}<br>console.timeEnd(</span>‘Fancy’<span style="color: #000000;">);<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;">——————————————–</span><span style="color: #008000;"><br>//</span><span style="color: #008000;">Case 2: 比较好，但仍然很慢</span><br>console.time(‘Parent-child’<span style="color: #000000;">);<br></span><span style="color: #0000ff;">for</span> (i = 0; i &lt; iterations; i++<span style="color: #000000;">) {<br></span><br>    $(‘#peanutButter div’<span style="color: #000000;">);<br>}<br>console.timeEnd(</span>‘Parent-child’<span style="color: #000000;">);<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;">——————————————–</span><span style="color: #008000;"><br>//</span><span style="color: #008000;">Case 3: 一些浏览器会比较快</span><br>console.time(‘Parent-child by class’<span style="color: #000000;">);<br></span><span style="color: #0000ff;">for</span> (i = 0; i &lt; iterations; i++<span style="color: #000000;">) {<br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 通过后代Class选择器</span><br>    $(‘#peanutButter .jellyTime’<span style="color: #000000;">);<br>}<br>console.timeEnd(</span>‘Parent-child by class’<span style="color: #000000;">);<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;">——————————————–</span><span style="color: #008000;"><br>//</span><span style="color: #008000;">Case 4: 更好的方式 </span><br>console.time(‘By class name’<span style="color: #000000;">);<br></span>21<br><span style="color: #0000ff;">for</span> (i = 0; i &lt; iterations; i++<span style="color: #000000;">) {<br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 直接通过Class选择器</span><br>    $(‘.jellyTime’<span style="color: #000000;">);<br>}<br>console.timeEnd(</span>‘By class name’<span style="color: #000000;">);<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;">——————————————–</span><span style="color: #008000;"><br>//</span><span style="color: #008000;">Case 5: 推荐的方式 ID选择器</span><br>console.time(‘By id’<span style="color: #000000;">);<br></span><span style="color: #0000ff;">for</span> (i = 0; i &lt; iterations; i++<span style="color: #000000;">) {<br>   </span><br>    $(‘#jelly’<span style="color: #000000;">);<br>}<br>console.timeEnd(</span>‘By id’);</pre><br></div>

<p>执行结果：</p>
<p><img src="http://images0.cnblogs.com/blog2015/686913/201508/232232124417387.png" alt="">&nbsp;</p>
<h2 id="u7F13_u5B58jQuery_u5BF9_u8C61"><a href="#u7F13_u5B58jQuery_u5BF9_u8C61" class="headerlink" title="缓存jQuery对象"></a>缓存jQuery对象</h2><p>每次通过选择器构建一个新的jQuery对象时，jQuery的核心部分的Sizzle引擎会遍历DOM然后通过对应的选择器来匹配真正的dom元素。这种方式比较低效，在现代浏览器中可以通过document.querySelector方法通过传入对应的Class参数来匹配对应的元素，不过IE8以下版本不支持此方法。一个提高性能的实践是通过变量缓存jQuery对象。例如：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ul </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”pancakes”</span> <span style="color: #0000ff;">&gt;</span><br>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>first<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>second<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>third<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>fourth<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>         <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>fifth<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>JS：</p>
<div class="cnblogs_code"><br><pre><span style="color: #008000;">//</span><span style="color: #008000;"> 不好的方式:</span><span style="color: #008000;"><br>//</span><span style="color: #008000;"> $(‘#pancakes li’).eq(0).remove();</span><span style="color: #008000;"><br>//</span><span style="color: #008000;"> $(‘#pancakes li’).eq(1).remove();</span><span style="color: #008000;"><br>//</span><span style="color: #008000;"> $(‘#pancakes li’).eq(2).remove();</span><span style="color: #008000;"><br>//</span><span style="color: #008000;"> ————————————</span><span style="color: #008000;"><br>//</span><span style="color: #008000;"> 推荐的方式:</span><br><span style="color: #0000ff;">var</span> pancakes = $(‘#pancakes li’<span style="color: #000000;">);<br>pancakes.eq(</span>0<span style="color: #000000;">).remove();<br>pancakes.eq(</span>1<span style="color: #000000;">).remove();<br>pancakes.eq(</span>2<span style="color: #000000;">).remove();<br></span><span style="color: #008000;">//</span><span style="color: #008000;"> ————————————</span><span style="color: #008000;"><br>//</span><span style="color: #008000;"> 或者:</span><span style="color: #008000;"><br>//</span><span style="color: #008000;"> pancakes.eq(0).remove().end()</span><span style="color: #008000;"><br>//</span><span style="color: #008000;">  .eq(1).remove().end()</span><span style="color: #008000;"><br>//</span><span style="color: #008000;">  .eq(2).remove().end();</span></pre><br></div>

<h2 id="u5B9A_u4E49_u4E00_u4E2A_u53EF_u4EE5_u590D_u7528_u7684_u51FD_u6570"><a href="#u5B9A_u4E49_u4E00_u4E2A_u53EF_u4EE5_u590D_u7528_u7684_u51FD_u6570" class="headerlink" title="定义一个可以复用的函数"></a>定义一个可以复用的函数</h2><p>直接上例子：</p>
<p>HTML：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">button </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”menuButton”</span> <span style="color: #0000ff;">&gt;</span>Show Menu!<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">button</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">=”#”</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">=”menuLink”</span> <span style="color: #0000ff;">&gt;</span>Show Menu!<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>JS：</p>
<div class="cnblogs_code"><br><pre><span style="color: #008000;">//</span><span style="color: #008000;">Bad: </span><span style="color: #008000;"><br>//</span><span style="color: #008000;">这个会导致多个回调函数的副本占用内存</span><br>$(‘#menuButton, #menuLink’ ). click(<span style="color: #0000ff;">function</span><span style="color: #000000;">(){<br></span><span style="color: #008000;">//</span><span style="color: #008000;"> …</span><br><span style="color: #000000;">});<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;">———————————————-</span><span style="color: #008000;"><br>//</span><span style="color: #008000;">Better</span><br><span style="color: #0000ff;">function</span><span style="color: #000000;"> showMenu(){<br>alert(</span>‘Showing menu!’<span style="color: #000000;"> );<br></span><span style="color: #008000;">//</span><span style="color: #008000;"> Doing something complex here</span><br><span style="color: #000000;">}<br><br>$(</span>‘#menuButton’<span style="color: #000000;"> ). click(showMenu);<br>$(</span>‘#menuLink’ ). click(showMenu);</pre><br></div>

<p>如果定义一个内联(inline)回调函数同时这个包含多个元素的jQuery对象（正如上面所说的第一个例子），对于这个集合中的每个元素都会在内存中保存一个回调函数的副本。</p>
<h2 id="u7528_u6570_u7EC4_u65B9_u5F0F_u6765_u904D_u5386jQuery__u5BF9_u8C61_u96C6_u5408"><a href="#u7528_u6570_u7EC4_u65B9_u5F0F_u6765_u904D_u5386jQuery__u5BF9_u8C61_u96C6_u5408" class="headerlink" title="用数组方式来遍历jQuery 对象集合"></a>用数组方式来遍历jQuery 对象集合</h2><p>你或许没有注意到，但是在性能方面，对于jQuery each方法这种优雅实现是有代价的。有一个办法能够更快地遍历一个jQuery对象。就是通过数组来实现，jQuery对象集合就是一个类数组，具有length和value属性。可以通过程序来测试一下性能：</p>
<p>HTML:</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ul </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”testList”</span> <span style="color: #0000ff;">&gt;</span><br>   <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>Item<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>   <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>Item<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>   <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>Item<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>   <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>Item<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>   <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>Item<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>   <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>Item<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>   <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>Item<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>   <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>Item<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>   <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>Item<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>   <span style="color: #008000;">&lt;!–</span><span style="color: #008000;"> add 50 more </span><span style="color: #008000;">–&gt;</span><br><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>JS:</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">var</span> arr = $(‘li’<span style="color: #000000;">),<br>    iterations </span>= 100000<span style="color: #000000;">;<br></span><span style="color: #008000;">//</span><span style="color: #008000;">——————————</span><span style="color: #008000;"><br>//</span><span style="color: #008000;"> Array实现：    </span><br>console.time(‘Native Loop’<span style="color: #000000;">);<br></span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">var</span> z = 0; z &lt; iterations; z++<span style="color: #000000;">) {<br>    </span><span style="color: #0000ff;">var</span> length =<span style="color: #000000;"> arr.length;<br>    </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">var</span> i = 0; i &lt; length; i++<span style="color: #000000;">) {<br>        arr[i];<br>    }<br>}<br>console.timeEnd(</span>‘Native Loop’<span style="color: #000000;">);<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;">——————————</span><span style="color: #008000;"><br>//</span><span style="color: #008000;"> each实现：    </span><br>console.time(‘jQuery Each’<span style="color: #000000;">);<br></span><span style="color: #0000ff;">for</span> (z = 0; z &lt; iterations; z++<span style="color: #000000;">) {<br>    arr.each(</span><span style="color: #0000ff;">function</span><span style="color: #000000;">(i, val) {<br>        </span><span style="color: #0000ff;">this</span><span style="color: #000000;">;<br>    });<br>}<br>console.timeEnd(</span>‘jQuery Each’);</pre><br></div>

<p>结果：</p>
<p><img src="http://images0.cnblogs.com/blog2015/686913/201508/232347505972220.png" alt=""></p>
<p>可以看到通过数组实现方式遍历，执行效率更高。</p>
<p>//——————————————————-持续更新…</p>
<p>以上是一些搜集知识的总结，如有任何建议或疑问，欢迎留言讨论。</p>
]]></content>
    <summary type="html">
    <![CDATA[<div id="catalogBox">&nbsp;</div>

<h2 id="u901A_u8FC7CDN_uFF08Content_Delivery_Network_uFF09_u5F15_u5165jQuery_u5E93"><a href="#u901A_u8FC7CDN_uFF08Content_Delivery_Network_uFF09_u5F15_u5165jQuery_u5E93" class="headerlink" title="通过CDN（Content Delivery Network）引入jQuery库"></a>通过CDN（Content Delivery Network）引入jQuery库</h2><p>&nbsp;要提升网站中javascript的性能的最简单的一步就是引入最新版本的jQuery库，新发布的版本通常在性能上会有更好的提升而且也修复了一下bug。或者通过CDN引入也是很好的选择,通过CDN引入能够减少网站的加载时间。以下是一些CDN服务：<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery高级技巧——DOM操作篇]]></title>
    <link href="http://blog.linjiajun.com/2015/08/18/jQuery%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94DOM%E6%93%8D%E4%BD%9C%E7%AF%87/"/>
    <id>http://blog.linjiajun.com/2015/08/18/jQuery高级技巧——DOM操作篇/</id>
    <published>2015-08-18T15:30:00.000Z</published>
    <updated>2016-03-26T05:37:49.845Z</updated>
    <content type="html"><![CDATA[<div id="catalogBox">&nbsp;</div>

<h2 id="u9875_u9762_u52A0_u8F7D_u4E4BDOMReady_u4E8B_u4EF6"><a href="#u9875_u9762_u52A0_u8F7D_u4E4BDOMReady_u4E8B_u4EF6" class="headerlink" title="页面加载之DOMReady事件"></a>页面加载之DOMReady事件</h2><p>所谓domReady,也就是文档就绪，我们都知道，在操作dom时必须要在dom树加载完成后才能进行操作。如何检测DOM树已经构建完成，以下是一些实现的方式：<br><a id="more"></a><br>1.使用jQuery：</p>
<div class="cnblogs_code"><br><pre><span style="color: #008000;">//</span><span style="color: #008000;"> with jQuery</span><br>$(document).ready(<span style="color: #0000ff;">function</span>(){ <span style="color: #008000;">/<em></em></span><span style="color: #008000;"> … </span><span style="color: #008000;">/</span><span style="color: #000000;"> });<br></span><span style="color: #008000;">//</span><span style="color: #008000;"> shorter jQuery version</span><br>$(<span style="color: #0000ff;">function</span>(){ <span style="color: #008000;">/<em></em></span><span style="color: #008000;"> … </span><span style="color: #008000;">/</span> });</pre><br></div>

<p>2.监听DOMContentLoaded事件,DOM 树创建完成后会触发,不支持IE10以下版本。</p>
<div class="cnblogs_code"><br><pre><span style="color: #008000;">//</span><span style="color: #008000;"> without jQuery (doesn’t work in older IEs)</span><br>document.addEventListener(‘DOMContentLoaded’, <span style="color: #0000ff;">function</span><span style="color: #000000;">(){<br></span><span style="color: #008000;">//</span><span style="color: #008000;"> your code goes here</span><br>}, <span style="color: #0000ff;">false</span>);</pre><br></div>

<p>3.监听readyState状态，可实现跨浏览器</p>
<p>readyState 的状态属性：</p>
<ul>
<li>“uninitialized” &ndash; 原始状态</li>
<li>“loading” &ndash; 下载数据中</li>
<li>“loaded” &ndash; 下载完成</li>
<li>“interactive” &ndash; 还未执行完毕</li>
<li>“complete” &ndash; 脚本执行完毕<div class="cnblogs_code"><br><pre>r(<span style="color: #0000ff;">function</span><span style="color: #000000;">(){<br>alert(</span>‘DOM Ready!’<span style="color: #000000;">);<br>});<br></span><span style="color: #0000ff;">function</span> r(f){/in/.test(document.readyState)?setTimeout(‘r(‘+f+’)’,9):f()}</pre><br></div>

</li>
</ul>
<p>这个方法是不断监听readyState的loading状态，加载完成后则执行对应方法。具体可参考：<a href="http://www.dustindiaz.com/smallest-domready-ever" target="_blank" rel="external">http://www.dustindiaz.com/smallest-domready-ever</a></p>
<h2 id="u6839_u636E_u7279_u5B9A_u9875_u9762_u7684_u6267_u884C_u5BF9_u5E94_u7684_u4EE3_u7801"><a href="#u6839_u636E_u7279_u5B9A_u9875_u9762_u7684_u6267_u884C_u5BF9_u5E94_u7684_u4EE3_u7801" class="headerlink" title="根据特定页面的执行对应的代码"></a>根据特定页面的执行对应的代码</h2><p>如果所有页面的代码都写在一个JavaScript文件中，这样的代码就会难以维护。简单的办法就是根据不同的页面执行不同的代码。来看下例子：</p>
<p>例如在test.js有以下代码：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">var</span> route =<span style="color: #000000;"> {<br>        _routes: {}, </span><span style="color: #008000;">//</span><span style="color: #008000;"> The routes will be stored here</span><br>        add: <span style="color: #0000ff;">function</span><span style="color: #000000;">(url, callback) {<br>            </span><span style="color: #0000ff;">this</span>._routes[url] =<span style="color: #000000;"> callback;<br>        },<br>        run: </span><span style="color: #0000ff;">function</span><span style="color: #000000;">() {<br>            jQuery.each(</span><span style="color: #0000ff;">this</span>._routes, <span style="color: #0000ff;">function</span>(pattern) { <span style="color: #008000;">//</span><span style="color: #008000;"> pattern 指向_routes对象集合的key,即url</span><br>                <span style="color: #0000ff;">if</span><span style="color: #000000;"> (location.href.match(pattern)) {<br>                    </span><span style="color: #008000;">//</span><span style="color: #008000;"> “this” points to the function to be executed</span><br>                    <span style="color: #0000ff;">this</span>(); <span style="color: #008000;">//</span><span style="color: #008000;">this 指向指向 _routes对象集合的value,即要执行的方法</span><br><span style="color: #000000;">                }<br>            });<br>        }<br>    }<br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> Will execute only on this page:</span><br>route.add(‘test.html’, <span style="color: #0000ff;">function</span><span style="color: #000000;">() {<br>    alert(</span>‘Hello there!’<span style="color: #000000;">);<br>});<br>route.add(</span>‘products.html’, <span style="color: #0000ff;">function</span><span style="color: #000000;">() {<br>    alert(</span>“this won’t be executed :(“<span style="color: #000000;">);<br>});<br></span><span style="color: #008000;">//</span><span style="color: #008000;"> You can even use regex-es:</span><br>route.add(‘.*.html’, <span style="color: #0000ff;">function</span><span style="color: #000000;">() {<br>    alert(</span>‘This is using a regex!’<span style="color: #000000;">);<br>});<br>route.run();</span></pre><br></div>

<h2 id="u4F7F_u7528_u903B_u8F91_u4E0E_u8FD0_u7B97_u7B26"><a href="#u4F7F_u7528_u903B_u8F91_u4E0E_u8FD0_u7B97_u7B26" class="headerlink" title="使用逻辑与运算符"></a>使用逻辑与运算符</h2><p>利用逻辑与运算符可以简化条件分支语句写法，例子：</p>
<p>一般的写法：</p>
<div class="cnblogs_code"><br><pre><span style="color: #008000;">//</span><span style="color: #008000;"> Instead of writing this:</span><br><span style="color: #0000ff;">if</span>($(‘#elem’<span style="color: #000000;">).length){<br>   </span><span style="color: #008000;">//</span><span style="color: #008000;"> do something</span><br>}</pre><br></div>

<p>更好的写法：</p>
<div class="cnblogs_code"><br><pre>$(‘#elem’).length &amp;&amp; alert(“doing something”);</pre><br></div>

<h2 id="u975E_u5E38_u6709_u7528_u7684jquery_is_28_29_u65B9_u6CD5"><a href="#u975E_u5E38_u6709_u7528_u7684jquery_is_28_29_u65B9_u6CD5" class="headerlink" title="非常有用的jquery is()方法"></a>非常有用的jquery is()方法</h2><p>is()方法非常有用，来看些例子：</p>
<p>HTML:</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”elem”</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>JS:</p>
<div class="cnblogs_code"><br><pre>// 变量保存jQuery对象<br><span style="color: #0000ff;">var</span> elem = $(‘#elem’<span style="color: #000000;">);<br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 判断是否为div</span><br>elem.is(‘div’) &amp;&amp; console.log(“it’s a div”<span style="color: #000000;">);<br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 是否包含类名.bigbox</span><br>elem.is(‘.bigbox’) &amp;&amp; console.log(“it has the bigbox class!”<span style="color: #000000;">);<br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 是否可见</span><br>elem.is(‘:not(:visible)’) &amp;&amp; console.log(“it is hidden!”<span style="color: #000000;">);<br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 设置元素执行动画</span><br>elem.animate({‘width’:200},1<span style="color: #000000;">);<br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 是否执行动画</span><br>elem.is(‘:animated’) &amp;&amp; console.log(“it is animated!”);</pre><br></div>

<h2 id="u5B9A_u4E49_u4E00_u4E2Aexists_u51FD_u6570"><a href="#u5B9A_u4E49_u4E00_u4E2Aexists_u51FD_u6570" class="headerlink" title="定义一个exists函数"></a>定义一个exists函数</h2><p>判断一个jQuery对象是否存在需要判断length属性，可以封装为exists函数，简化代码，更加易读。</p>
<p>HTML：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”elem”</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>JS：</p>
<div class="cnblogs_code"><br><pre><span style="color: #008000;">//</span><span style="color: #008000;">一般方法</span><br>console.log($(‘#elem’).length == 1 ? “exists!” : “doesn’t exist!”<span style="color: #000000;">);<br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 封装方法</span><br>jQuery.fn.exists = <span style="color: #0000ff;">function</span>(){ <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">this</span>.length &gt; 0<span style="color: #000000;">; }<br>console.log($(</span>‘#elem’).exists() ? “exists!” : “doesn’t exist!”);</pre><br></div>

<h2 id="u4F7F_u7528_24_28_29_u51FD_u6570_u7684_u7B2C_u4E8C_u4E2A_u53C2_u6570"><a href="#u4F7F_u7528_24_28_29_u51FD_u6570_u7684_u7B2C_u4E8C_u4E2A_u53C2_u6570" class="headerlink" title="使用$()函数的第二个参数"></a>使用$()函数的第二个参数</h2><p>$()函数可以接收两个参数，第二个参数的作用是什么，可以来看下例子：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ul </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”firstList”</span> <span style="color: #0000ff;">&gt;</span><br>      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>one<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>two<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>three<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span><br><br><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ul </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”secondList”</span> <span style="color: #0000ff;">&gt;</span><br>      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>blue<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span>green<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>作用一：</p>
<div class="cnblogs_code"><br><pre><span style="color: #008000;">//</span><span style="color: #008000;">选取一个元素，通过#firstList限制元素只能在当前的ul节点范围内选取</span><br>$(‘li’ , ‘#firstList’ ). each(<span style="color: #0000ff;">function</span><span style="color: #000000;">(){<br>    console.log($(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">). html());<br>});<br>//相当于$(‘#firstList’ ). find(‘li’ );<br></span></pre><br></div>

<p>作用二：</p>
<div class="cnblogs_code"><br><pre><span style="color: #008000;">//</span><span style="color: #008000;">创建一个元素。第二个参数为对应的配置属性，包含jQuery方法会被执行</span><br><span style="color: #0000ff;">var</span> div = $(‘&lt;div&gt;’<span style="color: #000000;"> ,{<br> </span>“class” : “bigBlue”<span style="color: #000000;"> ,<br> </span>“css”<span style="color: #000000;"> : {<br> </span>“background-color” : “purple”<span style="color: #000000;"><br> },<br> </span>“width” : 20<span style="color: #000000;">,<br> </span>“height” : 20<span style="color: #000000;">,<br> </span>“animate” : { <span style="color: #008000;">//</span><span style="color: #008000;">使用jQuery的方法作为属性</span><br> “width” : 200<span style="color: #000000;">,<br> </span>“height” : 50<span style="color: #000000;"><br> }<br>});<br><br>div. appendTo(</span>‘body’ );</pre><br></div>

<h2 id="u53D6_u6D88_u53F3_u952EClick_u4E8B_u4EF6"><a href="#u53D6_u6D88_u53F3_u952EClick_u4E8B_u4EF6" class="headerlink" title="取消右键Click事件"></a>取消右键Click事件</h2><div class="cnblogs_code"><br><pre>$(<span style="color: #0000ff;">function</span><span style="color: #000000;">(){<br>    $(document).on(</span>“contextmenu” , <span style="color: #0000ff;">function</span><span style="color: #000000;">(e){<br>             e. preventDefault();<br>    });<br>});</span></pre><br></div>

<h2 id="u53D6_u6D88_u6587_u672C_u9009_u4E2D"><a href="#u53D6_u6D88_u6587_u672C_u9009_u4E2D" class="headerlink" title="取消文本选中"></a>取消文本选中</h2><div class="cnblogs_code"><br><pre>//适应于所有浏览器<br>$(‘p.descr’ ). attr(‘unselectable’ , ‘on’<span style="color: #000000;"> )<br>                  . css(</span>‘user-select’ , ‘none’<span style="color: #000000;"> )<br>                  . on(</span>‘selectstart’ , <span style="color: #0000ff;">false</span>);</pre><br></div>

<h2 id="u89E3_u6790_u951A_u5143_u7D20URL"><a href="#u89E3_u6790_u951A_u5143_u7D20URL" class="headerlink" title="解析锚元素URL"></a>解析锚元素URL</h2><div class="cnblogs_code"><br><pre><span style="color: #008000;">//</span><span style="color: #008000;"> 需要解析的URL</span><br><span style="color: #0000ff;">var</span> url = ‘<a href="http://tutorialzine.com/books/jquery-trickshots?trick=12#comments" target="_blank" rel="external">http://tutorialzine.com/books/jquery-trickshots?trick=12#comments</a>‘<span style="color: #000000;"> ;<br><br></span><span style="color: #008000;">//</span><span style="color: #008000;"> 通过url创建一个新的链接</span><br><span style="color: #0000ff;">var</span> a = $(‘&lt;a&gt;’<span style="color: #000000;"> ,{ href:  url });<br><br>console. log(</span>‘Host name: ‘ + a. prop(‘hostname’<span style="color: #000000;"> ));<br>console. log(</span>‘Path: ‘ + a. prop(‘pathname’<span style="color: #000000;"> ));<br>console. log(</span>‘Query: ‘ + a. prop(‘search’<span style="color: #000000;"> ));<br>console. log(</span>‘Protocol: ‘ + a. prop(‘protocol’<span style="color: #000000;"> ));<br>console. log(</span>‘Hash: ‘ + a. prop(‘hash’ ));</pre><br></div>

<p>输出结果：</p>
<p>Host name: tutorialzine.com<br>Path: /books/jquery-trickshots<br>Query: ?trick=12<br>Protocol: http:<br>Hash: #comments</p>
<p>以上是一些知识总结，如有任何建议或疑问，欢迎留言讨论。</p>
<p>参考链接：</p>
<p><a href="http://www.cnblogs.com/rubylouvre/p/4277408.html" target="_blank" rel="external">http://www.cnblogs.com/rubylouvre/p/4277408.html</a></p>
<p><a href="http://www.dustindiaz.com/smallest-domready-ever" target="_blank" rel="external">http://www.dustindiaz.com/smallest-domready-ever</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<div id="catalogBox">&nbsp;</div>

<h2 id="u9875_u9762_u52A0_u8F7D_u4E4BDOMReady_u4E8B_u4EF6"><a href="#u9875_u9762_u52A0_u8F7D_u4E4BDOMReady_u4E8B_u4EF6" class="headerlink" title="页面加载之DOMReady事件"></a>页面加载之DOMReady事件</h2><p>所谓domReady,也就是文档就绪，我们都知道，在操作dom时必须要在dom树加载完成后才能进行操作。如何检测DOM树已经构建完成，以下是一些实现的方式：<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用checkbox实现纯CSS下拉框]]></title>
    <link href="http://blog.linjiajun.com/2015/08/17/%E4%BD%BF%E7%94%A8checkbox%E5%AE%9E%E7%8E%B0%E7%BA%AFCSS%E4%B8%8B%E6%8B%89%E6%A1%86/"/>
    <id>http://blog.linjiajun.com/2015/08/17/使用checkbox实现纯CSS下拉框/</id>
    <published>2015-08-17T03:36:00.000Z</published>
    <updated>2016-03-26T05:38:36.124Z</updated>
    <content type="html"><![CDATA[<p>在这个例子中，我们会看到一个纯CSS制作的下拉框。主要是要用到了HTML元素的checkbox 和CSS3选择器，并没有用到JavaScript。例子如下：<br><a id="more"></a><br>&nbsp;</p>
<p><style>&lt;!–<br>.dropdown *{padding: 0;margin: 0;}<br>         .dropdown{<br>            position: relative;<br>            display: inline-block;<br>            font-size: 16px;<br>            color: #FFF;<br>height:300px;<br>        }<br>         .dropdown input[type=”checkbox”]{display: none;}<br>         .dropdown label{<br>            box-sizing: border-box;<br>            display: inline-block;<br>            width: 100%;<br>            background-color: #57A0D4;<br>            padding: 15px 20px;</p>
<pre><code>    cursor: pointer;
    text-align: center;
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);

    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

 /*  The ul will have display:none by default */
    .dropdown ul{
        position: absolute;
        list-style: none;
</code></pre><p>list-style-type:none !important;<br>                text-align: left;<br>                width: 100%;<br>                z-index: 1;<br>                margin:0 !important;<br>                padding:0;<br>                box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.2);<br>                display: none;</p>
<pre><code>}

.dropdown ul li{
                list-style: none;
    padding: 15px;
    background-color: #fff;
    color: #4FB9A7;
    margin-bottom: 1px;
    cursor: pointer;
}

.dropdown ul li:hover{
    background-color: #4FB9A7;
    color: #FFF;
}

.dropdown ul li a{
    color: inherit;
    text-decoration: none;
}

.dropdown input[type=checkbox]:checked ~ label {
    background-color: #3D88BD;
}
 .dropdown input[type=&quot;checkbox&quot;]:checked ~ ul{
    display: block;
 }
</code></pre><p>–&gt;</style></p>
<div class="dropdown"><input id="checkbox_toggle" type="checkbox"> <label for="checkbox_toggle">Click to Expand</label><br><br><em>   <a href="#">Link One</a>
</em>   <a href="#">Link Two</a><br><em>   <a href="#">Link Three</a>
</em>   <a href="#">Link Four</a><br></div>

<p>实现过程：</p>
<h2 id="26nbsp_3BHTML_u7ED3_u6784"><a href="#26nbsp_3BHTML_u7ED3_u6784" class="headerlink" title="&nbsp;HTML结构"></a>&nbsp;HTML结构</h2><div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=”dropdown”</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">input </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">=”checkbox”</span><span style="color: #ff0000;"> id</span><span style="color: #0000ff;">=”checkbox_toggle”</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">label </span><span style="color: #ff0000;">for</span><span style="color: #0000ff;">=”checkbox_toggle”</span><span style="color: #0000ff;">&gt;</span>Click to Expand<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">label</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">=”#”</span><span style="color: #0000ff;">&gt;</span>Link One<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">=”#”</span><span style="color: #0000ff;">&gt;</span>Link Two<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">=”#”</span><span style="color: #0000ff;">&gt;</span>Link Three<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">a </span><span style="color: #ff0000;">href</span><span style="color: #0000ff;">=”#”</span><span style="color: #0000ff;">&gt;</span>Link Four<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">a</span><span style="color: #0000ff;">&gt;&lt;/</span><span style="color: #800000;">li</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">ul</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>&nbsp;</p>
<p>#div作为一个容器包裹所有标签</p>
<p>#input[type=checked]标签用于标识checked 和unchecked 属性，元素是隐藏的</p>
<p>#label标签用于触发下拉菜单</p>
<p>#ul为菜单列表</p>
<h2 id="26nbsp_3B_u6DFB_u52A0Checkbox_Hack"><a href="#26nbsp_3B_u6DFB_u52A0Checkbox_Hack" class="headerlink" title="&nbsp;添加Checkbox Hack"></a>&nbsp;添加Checkbox Hack</h2><p>我们只需要checkbox元素的伪类选择器:checked就可以检测到元素的checked状态，通过label标签来触发checkbox的unchecked 和checked 状态。首先把checkbox隐藏</p>
<div class="cnblogs_Highlighter"><br><pre class="brush:html;gutter:true;">input[type=checkbox]{<br>    display: none;<br>}<br></pre><br></div>

<p>同时，我们也把ul默认隐藏掉，当触发菜单时才会显示。</p>
<div class="cnblogs_Highlighter"><br><pre class="brush:html;gutter:true;">ul{<br>    display: none;<br>}<br></pre><br></div>

<p>通过结合:checked选择器 和相邻同胞选择器~ 来控制对应的菜单的显示状态。</p>
<div class="cnblogs_code"><br><pre><span style="color: #000000;">input[type=checkbox]:checked ~ ul {<br>    display: block<br>}</span></pre><br></div>

<p>当checkbox为选中状态时，下拉菜单就显示，否则隐藏。</p>
<p>&nbsp;</p>
<p>demo:</p>
<p><a href="http://files.cnblogs.com/files/bigboyLin/demo.zip" target="_blank" rel="external">demo.zip</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在这个例子中，我们会看到一个纯CSS制作的下拉框。主要是要用到了HTML元素的checkbox 和CSS3选择器，并没有用到JavaScript。例子如下：<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何解决cellIndex在IE下兼容性问题]]></title>
    <link href="http://blog.linjiajun.com/2015/08/12/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3cellIndex%E5%9C%A8IE%E4%B8%8B%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.linjiajun.com/2015/08/12/如何解决cellIndex在IE下兼容性问题/</id>
    <published>2015-08-12T03:12:00.000Z</published>
    <updated>2016-03-26T05:38:47.844Z</updated>
    <content type="html"><![CDATA[<p>在不久前的项目中，涉及到一个表格数据展示在IE下出现兼容性问题。经过一段时间的排查，居然是一个cellIndex属性导致的。</p>
<p>cellIndex表示返回一行的单元格集合中单元格的位置索引。<br><a id="more"></a><br>例子：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">table </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”table”</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">tr</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">td</span><span style="color: #0000ff;">&gt;</span>1<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">td</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">td</span><span style="color: #0000ff;">&gt;</span>2<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">td</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">td</span><span style="color: #0000ff;">&gt;</span>3<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">td</span><span style="color: #0000ff;">&gt;</span><br>                <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">td</span><span style="color: #0000ff;">&gt;</span>4<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">td</span><span style="color: #0000ff;">&gt;</span><br>            <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">tr</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">table</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">script </span><span style="color: #ff0000;">type</span><span style="color: #0000ff;">=”text/javascript”</span><span style="color: #0000ff;">&gt;</span><span style="background-color: #f5f5f5; color: #000000;"><br>              document.getElementById(</span><span style="background-color: #f5f5f5; color: #000000;">‘</span><span style="background-color: #f5f5f5; color: #000000;">table</span><span style="background-color: #f5f5f5; color: #000000;">‘</span><span style="background-color: #f5f5f5; color: #000000;">).onclick </span><span style="background-color: #f5f5f5; color: #000000;">=</span> <span style="background-color: #f5f5f5; color: #0000ff;">function</span><span style="background-color: #f5f5f5; color: #000000;">(event){<br>                  </span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> event </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> event </span><span style="background-color: #f5f5f5; color: #000000;">||</span><span style="background-color: #f5f5f5; color: #000000;"> window.event;<br>                  </span><span style="background-color: #f5f5f5; color: #0000ff;">var</span><span style="background-color: #f5f5f5; color: #000000;"> obj </span><span style="background-color: #f5f5f5; color: #000000;">=</span><span style="background-color: #f5f5f5; color: #000000;"> event.target</span><span style="background-color: #f5f5f5; color: #000000;">||</span><span style="background-color: #f5f5f5; color: #000000;">event.srcElement;<br>                  </span><span style="background-color: #f5f5f5; color: #0000ff;">if</span><span style="background-color: #f5f5f5; color: #000000;">( obj.tagName.toLowerCase()</span><span style="background-color: #f5f5f5; color: #000000;">==</span> <span style="background-color: #f5f5f5; color: #000000;">“</span><span style="background-color: #f5f5f5; color: #000000;">td</span><span style="background-color: #f5f5f5; color: #000000;">“</span><span style="background-color: #f5f5f5; color: #000000;">){<br>                      alert(obj.cellIndex);<br>                  }<br>              }<br>        </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">script</span><span style="color: #0000ff;">&gt;</span></pre><br></div><br><style><!--
#table{
        border-collapse: collapse;
        width: 300px;
    }
    #table td{
        border:1px solid #000;
        padding: 10px;
        text-align: center;
                cursor:pointer;
    }
--></style><br><table id="table"><br><tbody><br><tr><br><td>1</td><br><td>2</td><br><td>3</td><br><td>4</td><br></tr><br></tbody><br></table><br><script type="text/javascript">// &lt;![CDATA[<br>document.getElementById(‘table’).onclick = function(event){<br>                  var event = event || window.event;<br>                  var obj = event.target||event.srcElement;<br>                  if( obj.tagName.toLowerCase()== “td”){<br>                      document.getElementById(‘num’).innerHTML =”TD索引为：”+obj.cellIndex;<br>                  }<br>              }<br>// ]]&gt;</script><br><br>点击相应的td会返回对应的索引0,1,2,3。<br><br><div id="num">TD索引为：</div>

<p>问题是在IE某些低版本的浏览器下，返回的索引会不一致。</p>
<p>目前解决办法：</p>
<p>(1)效率比较低的办法是通过遍历单元格添加对应的索引属性。</p>
<p>(2)暂未想到</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在不久前的项目中，涉及到一个表格数据展示在IE下出现兼容性问题。经过一段时间的排查，居然是一个cellIndex属性导致的。</p>
<p>cellIndex表示返回一行的单元格集合中单元格的位置索引。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何解决div层被flash遮盖的问题]]></title>
    <link href="http://blog.linjiajun.com/2015/08/04/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3div%E5%B1%82%E8%A2%ABflash%E9%81%AE%E7%9B%96%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.linjiajun.com/2015/08/04/如何解决div层被flash遮盖的问题/</id>
    <published>2015-08-04T09:31:00.000Z</published>
    <updated>2016-03-26T05:38:58.063Z</updated>
    <content type="html"><![CDATA[<p>&nbsp;页面构建中的Flash层会遮挡Div的问题，一般通过设置wmode=”transparent” 或wmode=”window”就可以解决。不过对于Flash视频这个貌似不太凑效。</p>
<p>对于Flash遮挡的问题，首先来了解一些wmode的一些属性值。</p>
<p><div id="catalogBox">&nbsp;</div><br><a id="more"></a></p>
<h2 id="wmode_u76845_u79CD_u53D6_u503C"><a href="#wmode_u76845_u79CD_u53D6_u503C" class="headerlink" title="wmode的5种取值"></a>wmode的5种取值</h2><h3 id="Window_u6A21_u5F0F"><a href="#Window_u6A21_u5F0F" class="headerlink" title="Window模式"></a>Window模式</h3><p>默认情况下的显示模式，在这种模式下 flash player 有自己的窗口句柄，这就意味着 flash 影片是存在于 Windows 中的一个显示实例，并且是在浏览器核心显示窗口之上的，所以 flash 只是貌似显示在浏览器中，但这也是 flash 最快最有效率的渲染模式。由于他是独立于浏览器的HTML渲染表面，这就导致默认显示方式下flash总是会遮住位置与他重合的所有 HTML 层。</p>
<h3 id="Opaque_u6A21_u5F0F"><a href="#Opaque_u6A21_u5F0F" class="headerlink" title="Opaque模式"></a>Opaque模式</h3><p>这是一种无窗口模式，在这种情况下flash player没有自己的窗口句柄，这就需要浏览器需要告诉flash player在浏览器的渲染表面绘制的时间和位置。这时flash影片就不会在高于浏览器HTML渲染表面而是与其他元素一样在同一个页面上，因此你就可以使用 <code>z-index</code> 值来控制 HTML 元素是遮盖 flash 或者被遮盖。</p>
<h3 id="Transparent_u6A21_u5F0F"><a href="#Transparent_u6A21_u5F0F" class="headerlink" title="Transparent模式"></a>Transparent模式</h3><p>透明模式，在这种模式下 flash player 会将 stage 的背景色 alpha 值降为 0 并且只会绘制 stage 上真实可见的对象，同样你也可以使用 <code>z-index</code> 来控制 flash 影片的层级值，但是与 Opaque 模式不同的是这样做会降低 flash 影片的回放效果，而且在 9.0.115 之前的 flash player 版本设置 <code>wmode=&quot;opaque&quot;</code> 或 <code>&quot;transparent&quot;</code> 会导致全屏模式失效。</p>
<h3 id="Direct_u6A21_u5F0F"><a href="#Direct_u6A21_u5F0F" class="headerlink" title="Direct模式"></a>Direct模式</h3><p>直接渲染模式，在该模式下，flash player 可以通过硬件直接对画面进行合成，并呈现在屏幕上。使用这种模式能够得到比 window 模式更好的渲染效果，特别是在视频播放方面，如果页面的 flash 需要使用了 stagevideo 或者 stage3D，那么必须使用这种模式。它有比 window 模式更好的渲染，但也有 window 模式下的所有缺点。</p>
<h3 id="GPU_u6A21_u5F0F"><a href="#GPU_u6A21_u5F0F" class="headerlink" title="GPU模式"></a>GPU模式</h3><p>在一些网络电视和移动设备上可以启用额外的硬件加速，与其他 wmode 值模式相比，显示序列的像素保真度无法保证，其他方面跟 direct 模式相似。&nbsp;</p>
<h2 id="div_u906E_u76D6Flash_u5C42_u6D4B_u8BD5_u7ED3_u8BBA"><a href="#div_u906E_u76D6Flash_u5C42_u6D4B_u8BD5_u7ED3_u8BBA" class="headerlink" title="div遮盖Flash层测试结论"></a>div遮盖Flash层测试结论</h2><p>1.使用 opaque/transparent 模式，只需 div 就可以遮挡住 Flash，对于Flash视频，IE中的div层需要嵌套iframe标签才可以遮挡；</p>
<p>2.使用 window/direct/gpu 模式：</p>
<ol>
<li>IE 需要借助 iframe 才能遮挡 Flash</li>
<li>Chrome 仅 div 即可遮挡 Flash</li>
<li>Firefox 当使用 rgba 的半透明背景色浮层时，无法遮挡 Flash，只有具有背景色(<code>background-color:#fff</code>)的元素才能遮挡 Flash，透明背景(<code>background:transparent</code>)，或者背景颜色为半透明(<code>background-color:rgba(255,255,255,0.5)</code>)，或者使用半透明图片(<code>background:url(alpha.png)</code>)做背景的元素都无法遮挡 Flash&nbsp;</li>
<li>Windows Safari 即使 iframe 也无法遮挡 Flash</li>
<li>Mac 系统下 wmode 取任何值， div 元素都能轻松遮挡 Flash 元素</li>
</ol>
<p>参考：</p>
<p><a href="http://note.rpsh.net/posts/93717-div-flash" target="_blank" rel="external">div 浮层遮盖 flash 问题再研究 </a></p>
<p><a href="http://www.cnblogs.com/binyong/archive/2009/03/17/1414774.html" target="_blank" rel="external">div层遮盖flash(兼容浏览器) </a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&nbsp;页面构建中的Flash层会遮挡Div的问题，一般通过设置wmode=”transparent” 或wmode=”window”就可以解决。不过对于Flash视频这个貌似不太凑效。</p>
<p>对于Flash遮挡的问题，首先来了解一些wmode的一些属性值。</p>
<p><div id="catalogBox">&nbsp;</div><br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS 去掉inline-block元素间隙的几种方法]]></title>
    <link href="http://blog.linjiajun.com/2015/07/07/CSS-%E5%8E%BB%E6%8E%89inline-block%E5%85%83%E7%B4%A0%E9%97%B4%E9%9A%99%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.linjiajun.com/2015/07/07/CSS-去掉inline-block元素间隙的几种方法/</id>
    <published>2015-07-07T05:44:00.000Z</published>
    <updated>2016-03-26T05:40:18.661Z</updated>
    <content type="html"><![CDATA[<p>&nbsp; &nbsp; &nbsp; 最近做移动端页面时，经常会用到inline-block元素来布局，但无可避免都会遇到一个问题，就是inline-block元素之间的间隙。这些间隙会导致一些布局上的问题，需要把间隙去掉。对于inline-block元素及去掉间隙的方法，在这里做一个简单的总结。</p>
<a id="more"></a>
<h2 id="inline-block_u662F_u4EC0_u4E48"><a href="#inline-block_u662F_u4EC0_u4E48" class="headerlink" title="inline-block是什么"></a>inline-block是什么</h2><p>&nbsp;inline-block 即内联块,在CSS的元素分类中可以分成三种：行内元素或者内联元素、块级元素、以及内联块元素。</p>
<p>内联块元素具有了内联元素以及块级元素的特性：（1）元素之间可以水平排列 （2）可以当做一个块级元素来设置各种的属性，例如：width、height、padding等。</p>
<p>例子1：定义一个内联元素span为inline-block元素</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”demo”</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;"><br>#demo span{<br>    display:inline-block;<br>　　 background:#ddd;<br>}</span></pre><br></div>

<p>效果图：</p>
<p><img src="http://images0.cnblogs.com/blog2015/686913/201507/062243272682975.png" alt=""></p>
<h2 id="inline-block_u517C_u5BB9_u6027"><a href="#inline-block_u517C_u5BB9_u6027" class="headerlink" title="inline-block兼容性"></a>inline-block兼容性</h2><h3 id="uFF081_uFF09inline_level_u7684_u5143_u7D20"><a href="#uFF081_uFF09inline_level_u7684_u5143_u7D20" class="headerlink" title="（1）inline level的元素"></a>（1）inline level的元素</h3><p>&nbsp;对于内联元素(inline element)，所有主流浏览器都支持直接设置display&nbsp;的value值为inline-block来将其定义为内联块。</p>
<h3 id="uFF082_uFF09block_level_u7684_u5143_u7D20"><a href="#uFF082_uFF09block_level_u7684_u5143_u7D20" class="headerlink" title="（2）block level的元素"></a>（2）block level的元素</h3><p>IE7及以下浏览器对块级元素(block element)的支持并不完全，它们只支持用display:inline-block去定义一个inline level的元素为内联块。</p>
<p>由于IE7及以下浏览器支持直接将inline level元素设置为内联块，所以我们可以变通实现，先将block level元素设置为inline，然后再去触发该元素的hasLayout，使其拥有和inline-block相似的特性。可以这样写：</p>
<p>例子2：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">id</span><span style="color: #0000ff;">=”demo”</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>我是一个div<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>我是一个div<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>我是一个div<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span>我是一个div<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;"><br>#demo div{<br>    display:inline-block;<br>    <em>display:inline; /</em>IE7 hack<em>/
    </em>zoom:1; /<em>触发hasLayout</em>/<br>}</span></pre><br></div>

<p>&nbsp;IE7及以下浏览器：block level元素转换为inline-block，在IE7及以下浏览器下元素间不出现间隙；inline level元素转换为inline-block，在IE7及以下浏览器下元素间出现间隙；紧跟block level转换为inline-block的元素之后有个inline level转换为inline-block的元素，在IE7及以下浏览器下这俩元素间不出现间隙；紧跟inline level转换为inline-block的元素之后有个block level转换为inline-block的元素，在IE7及以下浏览器下这俩元素间出现间隙；其它浏览器任何情况下均出现间隙；</p>
<h2 id="inline-block_u5143_u7D20_u95F4_u9699_u7531_u6765"><a href="#inline-block_u5143_u7D20_u95F4_u9699_u7531_u6765" class="headerlink" title="inline-block元素间隙由来"></a>inline-block元素间隙由来</h2><p>&nbsp;在例子1中，定义为inline-block元素会产生间隙，如果不设置display:inline-block，会是什么效果？如下：</p>
<p>例子3：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=”demo”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><br><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;"><br><br>.demo span{<br>     background:#ddd;<br>}</span></pre><br></div>

<p>效果图：</p>
<p><img src="http://images0.cnblogs.com/blog2015/686913/201507/062254460649599.png" alt=""></p>
<p>上面例子中，对span不做任何处理依然存在空隙，这到底是什么原因，是否是结构上的问题。假如将span标签都写成一行，又是怎样的效果，来看一下：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=”demo”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span&gt;&lt;span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;"><br>.demo span{<br>         background:#ddd;<br>}</span></pre><br></div>

<p>效果图：</p>
<p><img src="http://images0.cnblogs.com/blog2015/686913/201507/071102212527659.png" alt=""></p>
<p>可以看到间隙是由换行或者回车导致的。只要把标签写成一行或者标签直接没有空格，就不会出现间隙。但是这种方式是不太可靠，存在太多不可控的因素导致失效，例如：代码生成工具、代码格式化、或者其他人修改了代码等等。下面列举了各种去掉间隙的方法，是否适合需要看具体的应用场景了。</p>
<h2 id="u79FB_u9664inline-block_u5143_u7D20_u95F4_u9699_u65B9_u6CD5"><a href="#u79FB_u9664inline-block_u5143_u7D20_u95F4_u9699_u65B9_u6CD5" class="headerlink" title="移除inline-block元素间隙方法"></a>移除inline-block元素间隙方法</h2><h3 id="uFF081_uFF09_u79FB_u9664_u6807_u7B7E_u95F4_u7684_u7A7A_u683C"><a href="#uFF081_uFF09_u79FB_u9664_u6807_u7B7E_u95F4_u7684_u7A7A_u683C" class="headerlink" title="（1）移除标签间的空格"></a>（1）移除标签间的空格</h3><p>元素间的间隙出现的原因是元素标签之间的空格，把空格去掉间隙自然就会消失。来看以下几种写法：</p>
<p>*写法一：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=”demo”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>*写法二：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=”demo”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<p>&nbsp;*写法三：利用HTML注释标签</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=”demo”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #008000;">&lt;!–</span><br>        <span style="color: #008000;">–&gt;</span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #008000;">&lt;!–</span><br>        <span style="color: #008000;">–&gt;</span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #008000;">&lt;!–</span><br>        <span style="color: #008000;">–&gt;</span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span></pre><br></div>

<h3 id="uFF082_uFF09_u53D6_u6D88_u6807_u7B7E_u95ED_u5408"><a href="#uFF082_uFF09_u53D6_u6D88_u6807_u7B7E_u95ED_u5408" class="headerlink" title="（2）取消标签闭合"></a>（2）取消标签闭合</h3><div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=”demo”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>    </span><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;<br></span></pre><br><br>.demo span{<br>         background:#ddd;<br>         display: inline-block;<br>        }<br><br></div>

<p>把span标签的结束标签去掉，这样间隙就没有了。为了兼容IE6/IE7，最后一个标签需要闭合。</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=”demo”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: red;">&lt;/</span><span style="color: red;">span</span><span style="color: red;">&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;"><br>.demo span{<br>         background:#ddd;<br>         display: inline-block;<br>        }</span></pre><br></div>

<p>在<a href="http://i.meituan.com/" target="_blank" rel="external">美团</a>webapp页面中貌似也是用到了这种方法。可以看下：</p>
<p><img src="http://images0.cnblogs.com/blog2015/686913/201507/071155345499356.png" alt=""></p>
<p>源代码：</p>
<p><img src="http://images0.cnblogs.com/blog2015/686913/201507/071157042367188.png" alt=""></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 id="uFF083_uFF09_u4F7F_u7528font-size_3A0_3B"><a href="#uFF083_uFF09_u4F7F_u7528font-size_3A0_3B" class="headerlink" title="（3）使用font-size:0;"></a>（3）使用font-size:0;</h3><p>&nbsp;在父容器上使用font-size:0;可以消除间隙，可以这样写:</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=”demo”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;"><br>    .demo {font-size: 0;}<br>    .demo span{<br>         background:#ddd;<br>         display: inline-block;<br>         font-size: 14px; /<em>要设置相应的字号</em>/<br>    }</span></pre><br></div>

<p>&nbsp;对于Chrome, 其默认有最小字体大小限制，考虑到兼容性，需要取消字体大小限制，这样写：</p>
<div class="cnblogs_code"><br><pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">div </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=”demo”</span><span style="color: #0000ff;">&gt;</span><br>        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;">我是一个span<br>        </span><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span>我是一个span<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">span</span><span style="color: #0000ff;">&gt;</span><br>    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">div</span><span style="color: #0000ff;">&gt;</span><span style="color: #000000;"><br>    .demo {font-size: 0;-webkit-text-size-adjust:none;}<br>    .demo span{<br>         background:#ddd;<br>         display: inline-block;<br>         font-size: 14px; /<em>要设置相应的字号</em>/<br>    }</span></pre><br></div>

<p>&nbsp;</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>在移动端的页面中，个人倾向于设置font-size:0这种方法来清除掉。对于PC端上，可以参考doyoe的<a href="http://demo.doyoe.com/css/inline-block-space/" target="_blank" rel="external">全浏览器兼容方案</a>。</p>
<p>以上是在工作上遇到一些问题的知识总结，不足之处，欢迎指正。</p>
<p>&nbsp;</p>
<p>如有任何建议或疑问，欢迎留言讨论。</p>
<p>如果觉得文章不错的话，欢迎点一下右下角的推荐。</p>
<p>更多阅读：</p>
<p><a href="http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/" target="_blank" rel="external">去除inline-block元素间间距的N种方法</a>;</p>
<p><a href="http://www.w3cplus.com/css/fighting-the-space-between-inline-block-elements" target="_blank" rel="external">如何解决inline-block元素的空白间距</a></p>
<p><a href="http://www.w3cplus.com/css/inline-blocks.html" target="_blank" rel="external">应不应该使用inline-block代替float</a></p>
<p>&nbsp;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&nbsp; &nbsp; &nbsp; 最近做移动端页面时，经常会用到inline-block元素来布局，但无可避免都会遇到一个问题，就是inline-block元素之间的间隙。这些间隙会导致一些布局上的问题，需要把间隙去掉。对于inline-block元素及去掉间隙的方法，在这里做一个简单的总结。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[xampp 访问出现New XAMPP security concept 解决办法]]></title>
    <link href="http://blog.linjiajun.com/2015/06/27/xampp-%E8%AE%BF%E9%97%AE%E5%87%BA%E7%8E%B0New-XAMPP-security-concept-%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://blog.linjiajun.com/2015/06/27/xampp-访问出现New-XAMPP-security-concept-解决办法/</id>
    <published>2015-06-27T13:00:00.000Z</published>
    <updated>2016-03-26T05:42:49.334Z</updated>
    <content type="html"><![CDATA[<p>最近通过手机访问本地服务器时出现以下问题：</p>
<p>Access forbidden!</p>
<p>New XAMPP security concept:</p>
<p>Access to the requested directory is only available from the local network.</p>
<p>This setting can be configured in the file “httpd-xampp.conf”.</p>
<p>If you think this is a server error, please contact the webmaster.</p>
<p>&nbsp;<br><a id="more"></a><br>&nbsp;</p>
<p>解决方法：</p>
<p>打开httpd-xampp.conf(/xampp/apache/conf/extra/httpd-xampp.conf)</p>
<p>#</p>
<h1 id="New_XAMPP_security_concept"><a href="#New_XAMPP_security_concept" class="headerlink" title="New XAMPP security concept"></a>New XAMPP security concept</h1><p>#<br>&lt;LocationMatch “^/(?i:(?:xampp|security|licenses|phpmyadmin|webalizer|server-status|server-info))”&gt;<br>&nbsp;&nbsp;&nbsp; Order deny,allow<br>&nbsp;&nbsp;&nbsp;#Deny from all<br>&nbsp;&nbsp;&nbsp; Allow from 127.0.0.0/8<br>&nbsp;&nbsp;&nbsp; ErrorDocument 403 /error/HTTP_XAMPP_FORBIDDEN.html.var<br>&lt;/LocationMatch&gt;</p>
<p>注：Deny from all注释掉，变成: #Deny from all</p>
<p>注：需要重启apache[/opt/lampp/lampp restartapache]</p>
<p>就可以远程登录xampp了，通过外网登陆本地xampp了。</p>
<hr>
<p>新版本可能是用下面的这个方法：</p>
<h1 id="Require_local"><a href="#Require_local" class="headerlink" title="Require local"></a>Require local</h1><p>ErrorDocument 403 /error/XAMPP_FORBIDDEN.html.var<br>正解方法是注掉本地访问这行，如下：&nbsp;</p>
<p>#Require local<br>最后，重启启动xampp，OK了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近通过手机访问本地服务器时出现以下问题：</p>
<p>Access forbidden!</p>
<p>New XAMPP security concept:</p>
<p>Access to the requested directory is only available from the local network.</p>
<p>This setting can be configured in the file “httpd-xampp.conf”.</p>
<p>If you think this is a server error, please contact the webmaster.</p>
<p>&nbsp;<br>]]>
    
    </summary>
    
  </entry>
  
</feed>
